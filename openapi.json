{
  "security": [
    {
      "apiKeyAuth": [],
      "UserIdAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://v1.api.flux-os.com",
      "description": "v1"
    }
  ],
  "info": {
    "description": "This API provides access to data on the Flux platform.",
    "contact": {
      "name": "Flux API Support",
      "email": "support@flux-os.com",
      "url": "https://www.flux-os.com/contact"
    },
    "title": "Flux API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Services",
      "description": "Health check and basic service operations, such as the ping endpoint."
    },
    {
      "name": "Organizations",
      "description": "Endpoints for organizations to configure, view, and manage their users, roles, permissions, product category specifications, commercial units, etc."
    },
    {
      "name": "Contracts",
      "description": "Endpoints for managing contracts, including statuses, roles, terms, line items, schedules, logistics, and transaction types."
    },
    {
      "name": "Messages",
      "description": "Endpoints for managing messages, including threads, participants, and organizations."
    },
    {
      "name": "Streams",
      "description": "Endpoints for managing streams, a commercial representation of a product."
    },
    {
      "name": "Products",
      "description": "Endpoints for managing product categories, a representation of a product by its physical specifications."
    },
    {
      "name": "Measurements",
      "description": "Endpoints for managing measurement units and their conversion relationships, including unit definitions, types, conversion factors, and validation rules."
    },
    {
      "name": "Currencies",
      "description": "Endpoints for handling currencies, conversions, and related financial data."
    },
    {
      "name": "Pricing",
      "description": "Endpoints for managing pricing, including wadfs, equalizations, fees, and related pricing data."
    },
    {
      "name": "Entities",
      "description": "Endpoints for managing entities such as producers, carriers, marketers, and other stakeholders."
    },
    {
      "name": "Facilities",
      "description": "Endpoints for managing facilities such as terminals, batteries, pipelines, etc."
    },
    {
      "name": "Wells",
      "description": "Endpoints for managing wells."
    },
    {
      "name": "Volumes",
      "description": "Endpoints for managing volumes, including tickets, meters, and volume transactions."
    },
    {
      "name": "Integrations",
      "description": "Endpoints for aiding data ingestion, integrations, and data transformation pipelines between an organization's systems and Flux."
    }
  ],
  "components": {
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      },
      "UserIdAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-user-id"
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized. The API key is missing or invalid.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Unauthorized."
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden. The user does not have the necessary permissions.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Forbidden."
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Something went wrong on the server.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Internal server error."
                }
              }
            }
          }
        }
      },
      "BadRequest": {
        "description": "The request was malformed or contained invalid parameters.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Invalid parameter format: page must be a positive integer."
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "OrganizationReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UserRoles": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UserPermissions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "Organization_User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "stytch_id": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoles"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPermissions"
            }
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name",
          "phone",
          "stytch_id",
          "title"
        ]
      },
      "EntityReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "legal_name": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "email": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "unit": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "street": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "city": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "zip_code": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "province": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "state": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "country": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "START",
              "INACTIVE_REACTIVATE_ELIGIBLE",
              "LIQUIDATION",
              "NON_REGISTERED",
              "DISCONTINUED_NO_REACTIVATION",
              "DISSOLVED",
              "CONTINUED_OUT",
              "ACTIVE",
              "STRUCK",
              "CONTINUED_OUT_AMALGAMATED",
              "AMALGAMATED",
              "DISSOLUTION/DISSOLVED"
            ]
          },
          "effective_date": {
            "type": "string",
            "format": "date"
          },
          "successor": {
            "default": null,
            "nullable": true
          },
          "business_lines": {
            "readOnly": true
          }
        },
        "required": [
          "effective_date",
          "legal_name"
        ]
      },
      "Organization_Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "email": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "short_code": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityReference"
            }
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "FacilityReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Organization_CommercialFacility": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "lsd": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "section": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "township": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "range": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "meridian": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "facilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacilityReference"
            },
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "Organization_CommercialFacilityFacility": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "commercial_facility": {},
          "facility": {
            "$ref": "#/components/schemas/FacilityReference"
          }
        },
        "required": [
          "commercial_facility"
        ]
      },
      "ProductCategoryReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Streams_Stream": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "product_category": {
            "$ref": "#/components/schemas/ProductCategoryReference"
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "MeasurementUnit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "abbreviation": {
            "type": "string"
          },
          "html_symbol": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "V",
              "T",
              "D",
              "P",
              "M",
              "E",
              "F"
            ]
          }
        },
        "required": [
          "abbreviation",
          "name",
          "type"
        ]
      },
      "UnitConversion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "product_category": {
            "$ref": "#/components/schemas/ProductCategoryReference"
          },
          "to_unit": {
            "$ref": "#/components/schemas/MeasurementUnit"
          },
          "formula": {
            "type": "string"
          }
        },
        "required": [
          "formula"
        ]
      },
      "UnitConversion1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "product_category": {
            "$ref": "#/components/schemas/ProductCategoryReference"
          },
          "from_unit": {
            "$ref": "#/components/schemas/MeasurementUnit"
          },
          "formula": {
            "type": "string"
          }
        },
        "required": [
          "formula"
        ]
      },
      "Measurements_MeasurementUnit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "abbreviation": {
            "type": "string"
          },
          "html_symbol": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "V",
              "T",
              "D",
              "P",
              "M",
              "E",
              "F"
            ]
          },
          "from_conversions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnitConversion"
            }
          },
          "to_conversions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnitConversion1"
            }
          }
        },
        "required": [
          "abbreviation",
          "name",
          "type"
        ]
      },
      "Measurements_MeasurementType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Measurements_MeasurementProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "UnitConversion2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "product_category": {
            "$ref": "#/components/schemas/ProductCategoryReference"
          },
          "from_unit": {
            "$ref": "#/components/schemas/MeasurementUnit"
          },
          "to_unit": {
            "$ref": "#/components/schemas/MeasurementUnit"
          },
          "formula": {
            "type": "string"
          }
        },
        "required": [
          "formula"
        ]
      },
      "Products_ProductCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "unit_conversions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnitConversion2"
            }
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "CommercialFacilityReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "MeasurementUnitReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "abbreviation": {
            "type": "string"
          }
        },
        "required": [
          "abbreviation"
        ]
      },
      "Products_CommercialBand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "product_category": {
            "$ref": "#/components/schemas/ProductCategoryReference"
          },
          "commercial_facility": {
            "$ref": "#/components/schemas/CommercialFacilityReference"
          },
          "density_min": {
            "type": "number"
          },
          "density_max": {
            "type": "number"
          },
          "density_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference"
          },
          "bsw_min": {
            "type": "number"
          },
          "bsw_max": {
            "type": "number"
          },
          "bsw_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference"
          }
        },
        "required": [
          "bsw_max",
          "bsw_min",
          "density_max",
          "density_min"
        ]
      },
      "FacilityReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "regulator_id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "Products_MechanicalBand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "product_category": {
            "$ref": "#/components/schemas/ProductCategoryReference"
          },
          "facility": {
            "$ref": "#/components/schemas/FacilityReference1"
          },
          "density_min": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "density_max": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "density_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference"
          },
          "bsw_min": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "bsw_max": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "bsw_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference"
          }
        }
      },
      "OrganizationReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "image_url": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "ContractStatusReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "ContractTermReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "ContractTransactionTypeReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "EntityReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "legal_name": {
            "type": "string"
          }
        },
        "required": [
          "legal_name"
        ]
      },
      "ContractRoleReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "UserReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "roles": {
            "readOnly": true
          }
        },
        "required": [
          "first_name",
          "last_name"
        ]
      },
      "ContractPartyUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "party": {},
          "user": {
            "$ref": "#/components/schemas/UserReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "party"
        ]
      },
      "ContractParty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "entity": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "role": {
            "$ref": "#/components/schemas/ContractRoleReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractPartyUser"
            }
          }
        }
      },
      "ContractScheduleStatusReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "MeasurementUnitReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "abbreviation": {
            "type": "string"
          },
          "html_symbol": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "abbreviation",
          "name"
        ]
      },
      "ContractSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/ContractScheduleStatusReference"
          },
          "production_month": {
            "type": "string",
            "format": "date"
          },
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "production_month",
          "volume"
        ]
      },
      "CurrencyReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "symbol"
        ]
      },
      "ProfitShare": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "paid_by": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference1"
              }
            ]
          },
          "paid_to": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference1"
              }
            ]
          },
          "settlement_currency": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyReference"
              }
            ]
          },
          "measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference1"
              }
            ]
          },
          "value": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "value"
        ]
      },
      "GeneralTermsAndConditions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "LegalProvisionTypeReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "organization": {}
        },
        "required": [
          "content",
          "name",
          "organization",
          "short_code"
        ]
      },
      "PaperLegalProvision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "provision": {
            "$ref": "#/components/schemas/LegalProvisionTypeReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Paper": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "paper_from": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "external_id": {
            "type": "string",
            "default": null,
            "maxLength": 255,
            "nullable": true
          },
          "governing_gtc": {
            "$ref": "#/components/schemas/GeneralTermsAndConditions"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "legal_provisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaperLegalProvision"
            }
          }
        }
      },
      "ProductCategoryReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "StreamReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "product_category": {}
        },
        "required": [
          "name",
          "product_category",
          "short_code"
        ]
      },
      "MeasurementTypeReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "PricingBasisReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "EqualizationReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name"
        ]
      },
      "Wadf": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyReference"
          },
          "measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          }
        },
        "required": [
          "amount",
          "name"
        ]
      },
      "Premium": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "default": "Premium",
            "maxLength": 255
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyReference"
          },
          "measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "paid_by": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "paid_to": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "amount"
        ]
      },
      "FeeTypeReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "FeeCategoryReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Fee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "$ref": "#/components/schemas/FeeTypeReference"
          },
          "fee_category": {
            "$ref": "#/components/schemas/FeeCategoryReference"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyReference"
          },
          "unit_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "base_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "total_cost": {
            "type": "number"
          }
        }
      },
      "TransportModeReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "WellReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        }
      },
      "CommercialFacilityReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "lsd": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "section": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "township": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "range": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "meridian": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "FeeReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {},
          "fee_category": {},
          "currency": {},
          "unit_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "measurement_unit": {
            "default": null,
            "nullable": true
          },
          "base_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "currency",
          "fee_category",
          "type"
        ]
      },
      "UserReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "last_name"
        ]
      },
      "TransportLeg": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "position": {
            "type": "integer"
          },
          "mode": {
            "$ref": "#/components/schemas/TransportModeReference"
          },
          "source_well": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/WellReference"
              }
            ]
          },
          "source_commercial_facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CommercialFacilityReference1"
              }
            ]
          },
          "source_facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FacilityReference"
              }
            ]
          },
          "destination_commercial_facility": {
            "$ref": "#/components/schemas/CommercialFacilityReference1"
          },
          "destination_facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FacilityReference"
              }
            ]
          },
          "volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference1"
              }
            ]
          },
          "custodian_organization": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "custodian_entity": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityReference1"
              }
            ]
          },
          "is_custody_transfer": {
            "type": "boolean",
            "default": false
          },
          "is_chain_source": {
            "type": "boolean",
            "default": false
          },
          "is_chain_destination": {
            "type": "boolean",
            "default": false
          },
          "fee": {
            "$ref": "#/components/schemas/FeeReference"
          },
          "carrier_organization": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference1"
              }
            ]
          },
          "carrier_entity": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityReference1"
              }
            ]
          },
          "carrier_user": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference1"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "position"
        ]
      },
      "TransportChain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "legs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportLeg"
            }
          }
        }
      },
      "PricingProvisionTypeReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "FeeReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "line_item": {},
          "type": {},
          "fee_category": {},
          "currency": {},
          "unit_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "measurement_unit": {
            "default": null,
            "nullable": true
          },
          "base_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "currency",
          "fee_category",
          "line_item",
          "type"
        ]
      },
      "PricingProvisionReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {},
          "line_item": {},
          "description": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "fee": {}
        },
        "required": [
          "fee",
          "line_item",
          "type"
        ]
      },
      "LogicalOperatorReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "symbol": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "symbol"
        ]
      },
      "MeasurementPropertyReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "ComparisonOperatorReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "symbol": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "symbol"
        ]
      },
      "PricingCondition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "measurement_property": {
            "$ref": "#/components/schemas/MeasurementPropertyReference"
          },
          "measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "comparison_operator": {
            "$ref": "#/components/schemas/ComparisonOperatorReference"
          },
          "value": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "value"
        ]
      },
      "ConditionGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "provision": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PricingProvisionReference"
              }
            ]
          },
          "parent_group": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ConditionGroup"
              }
            ]
          },
          "logical_operator": {
            "$ref": "#/components/schemas/LogicalOperatorReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingCondition"
            }
          }
        }
      },
      "PricingProvision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "$ref": "#/components/schemas/PricingProvisionTypeReference"
          },
          "description": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeReference1"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionGroup"
            }
          }
        }
      },
      "LineItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "product_category": {
            "$ref": "#/components/schemas/ProductCategoryReference1"
          },
          "stream": {
            "$ref": "#/components/schemas/StreamReference"
          },
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "measurement_type": {
            "$ref": "#/components/schemas/MeasurementTypeReference"
          },
          "pricing_basis": {
            "$ref": "#/components/schemas/PricingBasisReference"
          },
          "differential_unit_amount": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "differential_currency": {
            "$ref": "#/components/schemas/CurrencyReference"
          },
          "differential_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "percentage_of_index": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage_of_index_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "settlement_currency": {
            "$ref": "#/components/schemas/CurrencyReference"
          },
          "eq": {
            "$ref": "#/components/schemas/EqualizationReference"
          },
          "stream_wadf": {
            "$ref": "#/components/schemas/Wadf"
          },
          "feeder_wadf": {
            "$ref": "#/components/schemas/Wadf"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "premiums": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Premium"
            }
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            }
          },
          "chains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportChain"
            }
          },
          "pricing_provisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingProvision"
            }
          }
        },
        "required": [
          "volume"
        ]
      },
      "Contracts_Contract": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string",
            "maxLength": 255
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "status": {
            "$ref": "#/components/schemas/ContractStatusReference"
          },
          "term": {
            "$ref": "#/components/schemas/ContractTermReference"
          },
          "transaction_type": {
            "$ref": "#/components/schemas/ContractTransactionTypeReference"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractParty"
            }
          },
          "schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractSchedule"
            }
          },
          "profit_shares": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfitShare"
            }
          },
          "paper": {
            "$ref": "#/components/schemas/Paper"
          },
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItem"
            }
          }
        },
        "required": [
          "external_id",
          "start_date"
        ]
      },
      "Contracts_RequestContract": {
        "type": "object",
        "properties": {
          "external_id": {
            "type": "string",
            "maxLength": 255
          },
          "status": {
            "default": 1
          },
          "term": {},
          "transaction_type": {},
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "external_id",
          "start_date",
          "term",
          "transaction_type"
        ]
      },
      "Contracts_ContractType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ContractStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ContractScheduleStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ContractRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ContractTerm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ContractPaymentTerm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ContractTransactionType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "ContractReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "external_id"
        ]
      },
      "Contracts_ContractSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "contract": {
            "$ref": "#/components/schemas/ContractReference"
          },
          "status": {
            "$ref": "#/components/schemas/ContractScheduleStatusReference"
          },
          "production_month": {
            "type": "string",
            "format": "date"
          },
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "production_month",
          "volume"
        ]
      },
      "Contracts_RequestContractSchedule": {
        "type": "object",
        "properties": {
          "status": {
            "default": 1
          },
          "production_month": {
            "type": "string",
            "format": "date"
          },
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {}
        },
        "required": [
          "production_month",
          "volume",
          "volume_measurement_unit"
        ]
      },
      "Contracts_LineItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "contract": {
            "$ref": "#/components/schemas/ContractReference"
          },
          "product_category": {
            "$ref": "#/components/schemas/ProductCategoryReference1"
          },
          "stream": {
            "$ref": "#/components/schemas/StreamReference"
          },
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "measurement_type": {
            "$ref": "#/components/schemas/MeasurementTypeReference"
          },
          "pricing_basis": {
            "$ref": "#/components/schemas/PricingBasisReference"
          },
          "differential_unit_amount": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "differential_currency": {
            "$ref": "#/components/schemas/CurrencyReference"
          },
          "differential_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "percentage_of_index": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage_of_index_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "settlement_currency": {
            "$ref": "#/components/schemas/CurrencyReference"
          },
          "eq": {
            "$ref": "#/components/schemas/EqualizationReference"
          },
          "stream_wadf": {
            "$ref": "#/components/schemas/Wadf"
          },
          "feeder_wadf": {
            "$ref": "#/components/schemas/Wadf"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "premiums": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Premium"
            }
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            }
          },
          "chains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportChain"
            }
          },
          "pricing_provisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingProvision"
            }
          }
        },
        "required": [
          "volume"
        ]
      },
      "Contracts_RequestLineItem": {
        "type": "object",
        "properties": {
          "product_category": {},
          "stream": {},
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {},
          "measurement_type": {},
          "pricing_basis": {},
          "differential_unit_amount": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "differential_currency": {
            "default": null,
            "nullable": true
          },
          "differential_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "percentage_of_index": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage_of_index_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "settlement_currency": {},
          "eq": {},
          "stream_wadf": {},
          "feeder_wadf": {}
        },
        "required": [
          "eq",
          "feeder_wadf",
          "measurement_type",
          "pricing_basis",
          "product_category",
          "settlement_currency",
          "stream",
          "stream_wadf",
          "volume",
          "volume_measurement_unit"
        ]
      },
      "Contracts_ContractParty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "contract": {},
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "entity": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "role": {
            "$ref": "#/components/schemas/ContractRoleReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractPartyUser"
            }
          }
        },
        "required": [
          "contract"
        ]
      },
      "Contracts_RequestContractParty": {
        "type": "object",
        "properties": {
          "organization": {},
          "entity": {
            "default": null,
            "nullable": true
          },
          "role": {}
        },
        "required": [
          "organization",
          "role"
        ]
      },
      "Contracts_ContractPartyUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "party": {},
          "user": {
            "$ref": "#/components/schemas/UserReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "party"
        ]
      },
      "Contracts_RequestContractPartyUser": {
        "type": "object",
        "properties": {
          "user": {}
        },
        "required": [
          "user"
        ]
      },
      "LineItemReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "product_category": {},
          "stream": {},
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {},
          "measurement_type": {},
          "pricing_basis": {},
          "differential_unit_amount": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "differential_currency": {
            "default": null,
            "nullable": true
          },
          "differential_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "percentage_of_index": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage_of_index_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "settlement_currency": {},
          "eq": {},
          "stream_wadf": {},
          "feeder_wadf": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "eq",
          "feeder_wadf",
          "measurement_type",
          "pricing_basis",
          "product_category",
          "settlement_currency",
          "stream",
          "stream_wadf",
          "volume",
          "volume_measurement_unit"
        ]
      },
      "Contracts_Premium": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "line_item": {
            "$ref": "#/components/schemas/LineItemReference"
          },
          "name": {
            "type": "string",
            "default": "Premium",
            "maxLength": 255
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyReference"
          },
          "measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "paid_by": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "paid_to": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "amount"
        ]
      },
      "Contracts_RequestPremium": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "default": "Premium",
            "maxLength": 255
          },
          "amount": {
            "type": "number"
          },
          "currency": {},
          "measurement_unit": {
            "default": 2
          },
          "paid_by": {},
          "paid_to": {}
        },
        "required": [
          "amount",
          "currency",
          "paid_by",
          "paid_to"
        ]
      },
      "LineItemReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "contract": {},
          "product_category": {},
          "stream": {},
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {},
          "measurement_type": {},
          "pricing_basis": {},
          "differential_unit_amount": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "differential_currency": {
            "default": null,
            "nullable": true
          },
          "differential_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "percentage_of_index": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage_of_index_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "settlement_currency": {},
          "eq": {},
          "stream_wadf": {},
          "feeder_wadf": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "contract",
          "eq",
          "feeder_wadf",
          "measurement_type",
          "pricing_basis",
          "product_category",
          "settlement_currency",
          "stream",
          "stream_wadf",
          "volume",
          "volume_measurement_unit"
        ]
      },
      "Contracts_Fee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "line_item": {
            "$ref": "#/components/schemas/LineItemReference1"
          },
          "type": {
            "$ref": "#/components/schemas/FeeTypeReference"
          },
          "fee_category": {
            "$ref": "#/components/schemas/FeeCategoryReference"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyReference"
          },
          "unit_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "base_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "total_cost": {
            "type": "number"
          }
        }
      },
      "Contracts_RequestFee": {
        "type": "object",
        "properties": {
          "type": {},
          "fee_category": {},
          "currency": {},
          "unit_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "measurement_unit": {
            "default": null,
            "nullable": true
          },
          "base_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "currency",
          "fee_category",
          "type"
        ]
      },
      "Contracts_FeeType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          },
          "fee_category": {}
        },
        "required": [
          "fee_category",
          "name",
          "short_code"
        ]
      },
      "Contracts_ProfitShare": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "paid_by": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference1"
              }
            ]
          },
          "paid_to": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference1"
              }
            ]
          },
          "contract": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractReference"
              }
            ]
          },
          "settlement_currency": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyReference"
              }
            ]
          },
          "measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference1"
              }
            ]
          },
          "value": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "value"
        ]
      },
      "Contracts_RequestProfitShare": {
        "type": "object",
        "properties": {
          "paid_by": {},
          "paid_to": {},
          "settlement_currency": {},
          "measurement_unit": {},
          "value": {
            "type": "number"
          }
        },
        "required": [
          "measurement_unit",
          "paid_by",
          "paid_to",
          "settlement_currency",
          "value"
        ]
      },
      "Contracts_FeeCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_TransportMode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_TransportChain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "line_item": {
            "$ref": "#/components/schemas/LineItemReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "legs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportLeg"
            }
          }
        }
      },
      "Contracts_RequestTransportChain": {
        "type": "object",
        "properties": {}
      },
      "Contracts_TransportLeg": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "position": {
            "type": "integer"
          },
          "chain": {},
          "mode": {
            "$ref": "#/components/schemas/TransportModeReference"
          },
          "source_well": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/WellReference"
              }
            ]
          },
          "source_commercial_facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CommercialFacilityReference1"
              }
            ]
          },
          "source_facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FacilityReference"
              }
            ]
          },
          "destination_commercial_facility": {
            "$ref": "#/components/schemas/CommercialFacilityReference1"
          },
          "destination_facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FacilityReference"
              }
            ]
          },
          "volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference1"
              }
            ]
          },
          "custodian_organization": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "custodian_entity": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityReference1"
              }
            ]
          },
          "is_custody_transfer": {
            "type": "boolean",
            "default": false
          },
          "is_chain_source": {
            "type": "boolean",
            "default": false
          },
          "is_chain_destination": {
            "type": "boolean",
            "default": false
          },
          "fee": {
            "$ref": "#/components/schemas/FeeReference"
          },
          "carrier_organization": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReference1"
              }
            ]
          },
          "carrier_entity": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityReference1"
              }
            ]
          },
          "carrier_user": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserReference1"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "chain",
          "position"
        ]
      },
      "Contracts_RequestTransportLeg": {
        "type": "object",
        "properties": {
          "position": {
            "type": "integer"
          },
          "mode": {},
          "source_well": {
            "default": null,
            "nullable": true
          },
          "source_commercial_facility": {
            "default": null,
            "nullable": true
          },
          "source_facility": {
            "default": null,
            "nullable": true
          },
          "destination_commercial_facility": {},
          "destination_facility": {
            "default": null,
            "nullable": true
          },
          "volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "custodian_organization": {},
          "custodian_entity": {
            "default": null,
            "nullable": true
          },
          "is_custody_transfer": {
            "type": "boolean",
            "default": false
          },
          "fee": {
            "default": null,
            "nullable": true
          },
          "carrier_organization": {
            "default": null,
            "nullable": true
          },
          "carrier_entity": {
            "default": null,
            "nullable": true
          },
          "carrier_user": {
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "custodian_organization",
          "destination_commercial_facility",
          "mode"
        ]
      },
      "Contracts_LogicalOperator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          },
          "symbol": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code",
          "symbol"
        ]
      },
      "Contracts_ComparisonOperator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          },
          "symbol": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code",
          "symbol"
        ]
      },
      "Contracts_ConditionGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "provision": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PricingProvisionReference"
              }
            ]
          },
          "parent_group": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Contracts_ConditionGroup"
              }
            ]
          },
          "logical_operator": {
            "$ref": "#/components/schemas/LogicalOperatorReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingCondition"
            }
          }
        }
      },
      "Contracts_RequestConditionGroup": {
        "type": "object",
        "properties": {
          "parent_group": {
            "default": null,
            "nullable": true
          },
          "logical_operator": {}
        },
        "required": [
          "logical_operator"
        ]
      },
      "ConditionGroupReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "provision": {},
          "parent_group": {
            "default": null,
            "nullable": true
          },
          "logical_operator": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "logical_operator",
          "provision"
        ]
      },
      "Contracts_PricingCondition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "group": {
            "$ref": "#/components/schemas/ConditionGroupReference"
          },
          "measurement_property": {
            "$ref": "#/components/schemas/MeasurementPropertyReference"
          },
          "measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          },
          "comparison_operator": {
            "$ref": "#/components/schemas/ComparisonOperatorReference"
          },
          "value": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "value"
        ]
      },
      "Contracts_RequestPricingCondition": {
        "type": "object",
        "properties": {
          "measurement_property": {},
          "measurement_unit": {},
          "comparison_operator": {},
          "value": {
            "type": "number"
          }
        },
        "required": [
          "comparison_operator",
          "measurement_property",
          "measurement_unit",
          "value"
        ]
      },
      "Contracts_PricingProvision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "$ref": "#/components/schemas/PricingProvisionTypeReference"
          },
          "line_item": {
            "$ref": "#/components/schemas/LineItemReference1"
          },
          "description": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeReference1"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contracts_ConditionGroup"
            }
          }
        }
      },
      "Contracts_RequestPricingProvision": {
        "type": "object",
        "properties": {
          "type": {},
          "description": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "fee": {}
        },
        "required": [
          "fee",
          "type"
        ]
      },
      "Contracts_PricingProvisionType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_LegalProvision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "organization": {}
        },
        "required": [
          "content",
          "name",
          "organization",
          "short_code"
        ]
      },
      "PaperPricingProvision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "provision": {
            "$ref": "#/components/schemas/PricingProvisionReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Contracts_Paper": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "contract": {
            "$ref": "#/components/schemas/ContractReference"
          },
          "paper_from": {
            "$ref": "#/components/schemas/OrganizationReference1"
          },
          "external_id": {
            "type": "string",
            "default": null,
            "maxLength": 255,
            "nullable": true
          },
          "governing_gtc": {
            "$ref": "#/components/schemas/GeneralTermsAndConditions"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "legal_provisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaperLegalProvision"
            }
          },
          "pricing_provisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaperPricingProvision"
            }
          }
        }
      },
      "Contracts_RequestPaper": {
        "type": "object",
        "properties": {
          "paper_from": {},
          "external_id": {
            "type": "string",
            "default": null,
            "maxLength": 255,
            "nullable": true
          },
          "governing_gtc": {}
        },
        "required": [
          "governing_gtc",
          "paper_from"
        ]
      },
      "PaperReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Contracts_PaperLegalProvision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "paper": {
            "$ref": "#/components/schemas/PaperReference"
          },
          "provision": {
            "$ref": "#/components/schemas/LegalProvisionTypeReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Contracts_RequestPaperLegalProvision": {
        "type": "object",
        "properties": {}
      },
      "Contracts_PaperPricingProvision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "paper": {
            "$ref": "#/components/schemas/PaperReference"
          },
          "provision": {
            "$ref": "#/components/schemas/PricingProvisionReference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Contracts_GeneralTermsAndConditions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content",
          "name",
          "short_code"
        ]
      },
      "ThreadType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "OrganizationReference2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "email": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "short_code": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "UserReference2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "stytch_id": {
            "type": "string"
          },
          "organization": {},
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "roles": {
            "readOnly": true
          },
          "permissions": {
            "readOnly": true
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name",
          "organization",
          "phone",
          "stytch_id",
          "title"
        ]
      },
      "ContractReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string",
            "maxLength": 255
          },
          "organization": {},
          "status": {
            "default": 1
          },
          "term": {},
          "transaction_type": {},
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "external_id",
          "organization",
          "start_date",
          "term",
          "transaction_type"
        ]
      },
      "ContractScheduleReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "contract": {},
          "status": {
            "default": 1
          },
          "production_month": {
            "type": "string",
            "format": "date"
          },
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "contract",
          "production_month",
          "volume",
          "volume_measurement_unit"
        ]
      },
      "EntityReference2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "legal_name": {
            "type": "string"
          },
          "organization": {
            "default": null,
            "nullable": true
          },
          "url": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "email": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "unit": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "street": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "city": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "zip_code": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "province": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "state": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "country": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "START",
              "INACTIVE_REACTIVATE_ELIGIBLE",
              "LIQUIDATION",
              "NON_REGISTERED",
              "DISCONTINUED_NO_REACTIVATION",
              "DISSOLVED",
              "CONTINUED_OUT",
              "ACTIVE",
              "STRUCK",
              "CONTINUED_OUT_AMALGAMATED",
              "AMALGAMATED",
              "DISSOLUTION/DISSOLVED"
            ]
          },
          "effective_date": {
            "type": "string",
            "format": "date"
          },
          "successor": {
            "default": null,
            "nullable": true
          },
          "business_lines": {
            "readOnly": true
          }
        },
        "required": [
          "effective_date",
          "legal_name"
        ]
      },
      "MessageReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {},
          "from_user": {},
          "reply_to": {
            "default": null,
            "nullable": true
          },
          "message": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "from_user",
          "message",
          "thread"
        ]
      },
      "FacilityReference2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "lsd": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "section": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "township": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "range": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "meridian": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "type": {},
          "sub_type": {},
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "operator": {},
          "operational_status": {
            "type": "string",
            "enum": [
              "ABANDONED",
              "ACTIVE",
              "CANCELLED",
              "MINSUSPEND",
              "NEW",
              "NONREPORTING",
              "RECCERTIFIED",
              "RECEXEMPT",
              "RETIRED",
              "SUSPENDED"
            ]
          },
          "operator_start_date": {
            "type": "string",
            "format": "date"
          },
          "licensee": {
            "default": null,
            "nullable": true
          },
          "license_status": {
            "type": "string",
            "enum": [
              "ABANDONED",
              "AMMENDED",
              "CANCELLED",
              "DECOMMISSION",
              "ISSUED",
              "RE-ENTERED",
              "RECCERTIFIED",
              "RECEXEMPT",
              "SUSPENDED",
              "SUSPENSION"
            ]
          },
          "license_type": {
            "type": "string",
            "enum": [
              "WELL",
              "FACILITY"
            ]
          },
          "license_number": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "license_issued": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "regulator_id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          }
        },
        "required": [
          "name",
          "operator",
          "operator_start_date",
          "start_date",
          "sub_type",
          "type"
        ]
      },
      "CommercialFacilityReference2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "lsd": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "section": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "township": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "range": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "meridian": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "organization": {}
        },
        "required": [
          "name",
          "organization"
        ]
      },
      "Messages_MessageThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "$ref": "#/components/schemas/ThreadType"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationReference2"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserReference2"
            }
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractReference1"
            }
          },
          "schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractScheduleReference"
            }
          },
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemReference1"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserReference2"
            }
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityReference2"
            }
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageReference"
            }
          },
          "facilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacilityReference2"
            }
          },
          "commercial_facilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommercialFacilityReference2"
            }
          }
        }
      },
      "MessageThreadReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "type"
        ]
      },
      "Messages_Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {
            "$ref": "#/components/schemas/MessageThreadReference"
          },
          "from_user": {},
          "reply_to": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageReference"
              }
            ]
          },
          "message": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/UserReference2"
          }
        },
        "required": [
          "from_user",
          "message"
        ]
      },
      "Messages_MessageThreadParticipant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {
            "$ref": "#/components/schemas/MessageThreadReference"
          },
          "user": {
            "$ref": "#/components/schemas/UserReference2"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Messages_MessageThreadOrganization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {
            "$ref": "#/components/schemas/MessageThreadReference"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference2"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Messages_ThreadType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Messages_ContractThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {
            "$ref": "#/components/schemas/MessageThreadReference"
          },
          "contract": {
            "$ref": "#/components/schemas/ContractReference1"
          }
        }
      },
      "Messages_ScheduleThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {
            "$ref": "#/components/schemas/MessageThreadReference"
          },
          "schedule": {
            "$ref": "#/components/schemas/ContractScheduleReference"
          }
        }
      },
      "Messages_LineItemThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {
            "$ref": "#/components/schemas/MessageThreadReference"
          },
          "line_item": {
            "$ref": "#/components/schemas/LineItemReference1"
          }
        }
      },
      "Messages_UserThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {
            "$ref": "#/components/schemas/MessageThreadReference"
          },
          "user": {
            "$ref": "#/components/schemas/UserReference2"
          }
        }
      },
      "Messages_EntityThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {
            "$ref": "#/components/schemas/MessageThreadReference"
          },
          "entity": {
            "$ref": "#/components/schemas/EntityReference2"
          }
        }
      },
      "Currency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "symbol"
        ]
      },
      "CurrencyConversion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "to_currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "exchange_rate": {
            "type": "number"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "exchange_rate"
        ]
      },
      "Currency_Currency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "conversions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyConversion"
            }
          }
        },
        "required": [
          "name",
          "symbol"
        ]
      },
      "Currency_CurrencyConversion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "from_currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "to_currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "exchange_rate": {
            "type": "number"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "exchange_rate"
        ]
      },
      "WadfType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "StreamReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "product_category": {}
        },
        "required": [
          "name",
          "product_category"
        ]
      },
      "Pricing_Wadf": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/WadfType"
          },
          "stream": {
            "$ref": "#/components/schemas/StreamReference1"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyReference"
          },
          "measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference1"
          }
        },
        "required": [
          "amount",
          "name"
        ]
      },
      "Pricing_WadfType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Pricing_Equalization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "stream": {
            "$ref": "#/components/schemas/StreamReference1"
          },
          "measurement_unit": {
            "default": 2
          },
          "formula": {
            "type": "string"
          }
        },
        "required": [
          "formula",
          "name"
        ]
      },
      "Pricing_PricingBasis": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Pricing_Index": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          },
          "stream": {
            "$ref": "#/components/schemas/StreamReference1"
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Pricing_PriceBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "WellReference1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_id": {
            "type": "string"
          }
        },
        "required": [
          "regulator_id"
        ]
      },
      "StreamReference2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "BusinessLineReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Entity_Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "legal_name": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "url": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "email": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "unit": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "street": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "city": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "zip_code": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "province": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "state": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "country": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "START",
              "INACTIVE_REACTIVATE_ELIGIBLE",
              "LIQUIDATION",
              "NON_REGISTERED",
              "DISCONTINUED_NO_REACTIVATION",
              "DISSOLVED",
              "CONTINUED_OUT",
              "ACTIVE",
              "STRUCK",
              "CONTINUED_OUT_AMALGAMATED",
              "AMALGAMATED",
              "DISSOLUTION/DISSOLVED"
            ]
          },
          "effective_date": {
            "type": "string",
            "format": "date"
          },
          "successor": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "operated_facilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacilityReference1"
            }
          },
          "licensed_facilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacilityReference1"
            }
          },
          "licensed_wells": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WellReference1"
            }
          },
          "streams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreamReference2"
            }
          },
          "product_categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategoryReference"
            }
          },
          "business_lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessLineReference"
            }
          }
        },
        "required": [
          "effective_date",
          "legal_name"
        ]
      },
      "Wells_Well": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "uwi": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "location_exception": {
            "type": "string"
          },
          "event_sequence": {
            "type": "string"
          },
          "lsd": {
            "type": "integer"
          },
          "section": {
            "type": "integer"
          },
          "township": {
            "type": "integer"
          },
          "range": {
            "type": "integer"
          },
          "meridian": {
            "type": "string"
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "licensee": {},
          "license_status": {
            "type": "string",
            "enum": [
              "ABANDONED",
              "AMMENDED",
              "CANCELLED",
              "DECOMMISSION",
              "ISSUED",
              "RE-ENTERED",
              "RECCERTIFIED",
              "RECEXEMPT",
              "SUSPENDED",
              "SUSPENSION"
            ]
          },
          "license_type": {
            "type": "string",
            "enum": [
              "WELL",
              "FACILITY"
            ]
          },
          "license_number": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "license_issued": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "regulator_id": {
            "type": "string"
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          },
          "entity": {
            "$ref": "#/components/schemas/EntityReference1"
          }
        },
        "required": [
          "event_sequence",
          "licensee",
          "location_exception",
          "lsd",
          "meridian",
          "range",
          "regulator_id",
          "section",
          "township",
          "uwi"
        ]
      },
      "FacilitySubType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "facility_type": {},
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          }
        },
        "required": [
          "code",
          "facility_type",
          "name"
        ]
      },
      "Facility_FacilityType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "model": {
            "type": "string",
            "enum": [
              "Terminal",
              "Station",
              "Plant",
              "Battery",
              "System",
              "Pipeline",
              "Rail Line"
            ]
          },
          "sub_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacilitySubType"
            }
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "Facility_FacilitySubType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "facility_type": {},
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          }
        },
        "required": [
          "code",
          "facility_type",
          "name"
        ]
      },
      "FacilityTypeReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "FacilitySubTypeReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "Facility_Facility": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "lsd": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "section": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "township": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "range": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "meridian": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/FacilityTypeReference"
          },
          "sub_type": {
            "$ref": "#/components/schemas/FacilitySubTypeReference"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "operator": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "operational_status": {
            "type": "string",
            "enum": [
              "ABANDONED",
              "ACTIVE",
              "CANCELLED",
              "MINSUSPEND",
              "NEW",
              "NONREPORTING",
              "RECCERTIFIED",
              "RECEXEMPT",
              "RETIRED",
              "SUSPENDED"
            ]
          },
          "operator_start_date": {
            "type": "string",
            "format": "date"
          },
          "licensee": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "license_status": {
            "type": "string",
            "enum": [
              "ABANDONED",
              "AMMENDED",
              "CANCELLED",
              "DECOMMISSION",
              "ISSUED",
              "RE-ENTERED",
              "RECCERTIFIED",
              "RECEXEMPT",
              "SUSPENDED",
              "SUSPENSION"
            ]
          },
          "license_type": {
            "type": "string",
            "enum": [
              "WELL",
              "FACILITY"
            ]
          },
          "license_number": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "license_issued": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "regulator_id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          }
        },
        "required": [
          "name",
          "operator_start_date",
          "start_date"
        ]
      },
      "Volumes_Meter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FacilityReference1"
              }
            ]
          },
          "operator": {
            "$ref": "#/components/schemas/EntityReference1"
          }
        },
        "required": [
          "external_id"
        ]
      },
      "TicketStatusReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "MeterReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          }
        },
        "required": [
          "external_id"
        ]
      },
      "MeasurementUnitReference2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "abbreviation": {
            "type": "string"
          }
        },
        "required": [
          "abbreviation",
          "name"
        ]
      },
      "TicketCodeReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "TruckTicketErrorReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "field_name": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "error_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "resolved_at": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "resolved_by": {
            "type": "integer"
          }
        },
        "required": [
          "error_message",
          "error_type",
          "field_name"
        ]
      },
      "Volumes_TruckTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TicketStatusReference"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "bill_of_lading": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "load_ticket": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "carrier_organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "carrier_entity": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "driver": {
            "$ref": "#/components/schemas/UserReference1"
          },
          "source_commercial_facility": {
            "$ref": "#/components/schemas/CommercialFacilityReference"
          },
          "source_commercial_entity": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "source_facility_operator": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "source_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "source_facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FacilityReference1"
              }
            ]
          },
          "source_well": {
            "$ref": "#/components/schemas/WellReference1"
          },
          "destination_commercial_facility": {
            "$ref": "#/components/schemas/CommercialFacilityReference"
          },
          "destination_commercial_entity": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "destination_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "destination_facility_operator": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "destination_facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FacilityReference1"
              }
            ]
          },
          "production_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "meter": {
            "$ref": "#/components/schemas/MeterReference"
          },
          "meter_start": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_end": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "meter_factor": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "load_volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "load_volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "net_volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "net_volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "density": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "density_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "bsw": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "bsw_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "solids": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "solids_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference2"
              }
            ]
          },
          "water": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "water_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference2"
              }
            ]
          },
          "temperature": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "temperature_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference2"
              }
            ]
          },
          "codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketCodeReference"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TruckTicketErrorReference"
            }
          },
          "product_category": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductCategoryReference"
              }
            ]
          }
        },
        "required": [
          "external_id",
          "reference"
        ]
      },
      "Volumes_TankTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TicketStatusReference"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "commercial_facility": {
            "$ref": "#/components/schemas/CommercialFacilityReference"
          },
          "facility_operator": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FacilityReference1"
              }
            ]
          },
          "production_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "meter": {
            "$ref": "#/components/schemas/MeterReference"
          },
          "meter_start": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_end": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "meter_factor": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "net_volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "net_volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "density": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "density_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "bsw": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "bsw_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "solids": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "solids_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference2"
              }
            ]
          },
          "water": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "water_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference2"
              }
            ]
          },
          "temperature": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "temperature_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference2"
              }
            ]
          },
          "commercial_entity": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketCodeReference"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TruckTicketErrorReference"
            }
          }
        },
        "required": [
          "external_id",
          "reference"
        ]
      },
      "Volumes_MeterTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TicketStatusReference"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "source_commercial_facility": {
            "$ref": "#/components/schemas/CommercialFacilityReference"
          },
          "source_commercial_entity": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "source_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "source_facility_operator": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "source_facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FacilityReference1"
              }
            ]
          },
          "source_well": {
            "$ref": "#/components/schemas/WellReference1"
          },
          "destination_commercial_facility": {
            "$ref": "#/components/schemas/CommercialFacilityReference"
          },
          "destination_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "destination_commercial_entity": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "destination_facility_operator": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "destination_facility": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FacilityReference1"
              }
            ]
          },
          "production_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "meter": {
            "$ref": "#/components/schemas/MeterReference"
          },
          "meter_start": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_end": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "meter_factor": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "net_volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "net_volume_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "density": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "density_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "bsw": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "bsw_measurement_unit": {
            "$ref": "#/components/schemas/MeasurementUnitReference2"
          },
          "solids": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "solids_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference2"
              }
            ]
          },
          "water": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "water_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference2"
              }
            ]
          },
          "temperature": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "temperature_measurement_unit": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnitReference2"
              }
            ]
          },
          "codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketCodeReference"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TruckTicketErrorReference"
            }
          },
          "product_category": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductCategoryReference"
              }
            ]
          }
        },
        "required": [
          "external_id",
          "reference"
        ]
      },
      "Integrations_CommercialFacilityLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "commercial_facility": {
            "$ref": "#/components/schemas/CommercialFacilityReference"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "start_date"
        ]
      },
      "Integrations_FacilityLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "facility": {
            "$ref": "#/components/schemas/FacilityReference"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "start_date"
        ]
      },
      "Integrations_EntityLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "entity": {
            "$ref": "#/components/schemas/EntityReference1"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "start_date"
        ]
      },
      "WellReference2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "uwi": {
            "type": "string"
          }
        },
        "required": [
          "uwi"
        ]
      },
      "Integrations_WellLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "well": {
            "$ref": "#/components/schemas/WellReference2"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "start_date"
        ]
      },
      "Integrations_OrganizationLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "organization_lookup": {},
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "organization_lookup",
          "start_date"
        ]
      },
      "Service_Job": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "queue_name": {
            "type": "string"
          },
          "queue_function": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "T",
              "M"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "QUEUED",
              "STARTED",
              "FINISHED",
              "FAILED",
              "SCHEDULED"
            ]
          },
          "enqueued_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "input_data": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "output_data": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "queue_function",
          "queue_name",
          "type"
        ]
      },
      "KeyReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "active": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "Service_Request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationReference"
          },
          "key": {
            "$ref": "#/components/schemas/KeyReference"
          },
          "user": {
            "$ref": "#/components/schemas/UserReference1"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "endpoint": {
            "type": "string"
          },
          "method": {
            "type": "string",
            "enum": [
              "G",
              "P",
              "D"
            ]
          },
          "status_code": {
            "type": "integer",
            "enum": [
              "200",
              "201",
              "202",
              "204",
              "206",
              "300",
              "301",
              "302",
              "303",
              "304",
              "307",
              "308",
              "400",
              "401",
              "403",
              "404",
              "405",
              "406",
              "408",
              "409",
              "410",
              "411",
              "412",
              "413",
              "414",
              "415",
              "416",
              "417",
              "422",
              "429",
              "500",
              "501",
              "502",
              "503",
              "504",
              "505"
            ]
          },
          "request_data": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "response_data": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "headers": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "query_params": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "user_agent": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "duration_ms": {
            "type": "integer",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "endpoint",
          "method"
        ]
      },
      "Organization_ReferenceOrganization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "email": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "short_code": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "Organization_ReferenceUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "stytch_id": {
            "type": "string"
          },
          "organization": {},
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "roles": {
            "readOnly": true
          },
          "permissions": {
            "readOnly": true
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name",
          "organization",
          "phone",
          "stytch_id",
          "title"
        ]
      },
      "Organization_ReferenceUserRoles": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Organization_ReferenceUserPermissions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "Organization_ReferenceCommercialFacility": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "lsd": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "section": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "township": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "range": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "meridian": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "organization": {}
        },
        "required": [
          "name",
          "organization"
        ]
      },
      "Organization_ReferenceCommercialFacilityFacility": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "commercial_facility": {},
          "facility": {
            "type": "integer"
          }
        },
        "required": [
          "commercial_facility"
        ]
      },
      "Streams_ReferenceStream": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "product_category": {}
        },
        "required": [
          "name",
          "product_category",
          "short_code"
        ]
      },
      "Measurements_ReferenceMeasurementUnit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "abbreviation": {
            "type": "string"
          },
          "html_symbol": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "VOLUME",
              "TEMPERATURE",
              "DIMENSIONLESS",
              "DENSITY",
              "DISTANCE",
              "PRESSURE",
              "VISCOSITY",
              "MASS RATIO",
              "ENERGY",
              "FLOW RATE",
              "POWER",
              "PARTICLE SIZE"
            ]
          }
        },
        "required": [
          "abbreviation",
          "name"
        ]
      },
      "Measurements_ReferenceMeasurementType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Measurements_ReferenceMeasurementProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Products_ReferenceProductCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Products_ReferenceCommercialBand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "organization": {},
          "product_category": {},
          "commercial_facility": {},
          "density_min": {
            "type": "number"
          },
          "density_max": {
            "type": "number"
          },
          "density_measurement_unit": {},
          "bsw_min": {
            "type": "number"
          },
          "bsw_max": {
            "type": "number"
          },
          "bsw_measurement_unit": {
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "bsw_max",
          "bsw_min",
          "commercial_facility",
          "density_max",
          "density_measurement_unit",
          "density_min",
          "organization",
          "product_category"
        ]
      },
      "Products_ReferenceMechanicalBand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "organization": {},
          "product_category": {},
          "facility": {},
          "density_min": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "density_max": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "density_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "bsw_min": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "bsw_max": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "bsw_measurement_unit": {
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "facility",
          "organization",
          "product_category"
        ]
      },
      "Contracts_ReferenceContract": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string",
            "maxLength": 255
          },
          "organization": {},
          "status": {
            "default": 1
          },
          "term": {},
          "transaction_type": {},
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "external_id",
          "organization",
          "start_date",
          "term",
          "transaction_type"
        ]
      },
      "Contracts_ReferenceContractStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceContractScheduleStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceContractType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceContractRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceContractTerm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceContractPaymentTerm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceContractTransactionType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceContractSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "contract": {},
          "status": {
            "default": 1
          },
          "production_month": {
            "type": "string",
            "format": "date"
          },
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "contract",
          "production_month",
          "volume",
          "volume_measurement_unit"
        ]
      },
      "Contracts_ReferenceLineItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "contract": {},
          "product_category": {},
          "stream": {},
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {},
          "measurement_type": {},
          "pricing_basis": {},
          "differential_unit_amount": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "differential_currency": {
            "default": null,
            "nullable": true
          },
          "differential_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "percentage_of_index": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage_of_index_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "settlement_currency": {},
          "eq": {},
          "stream_wadf": {},
          "feeder_wadf": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "contract",
          "eq",
          "feeder_wadf",
          "measurement_type",
          "pricing_basis",
          "product_category",
          "settlement_currency",
          "stream",
          "stream_wadf",
          "volume",
          "volume_measurement_unit"
        ]
      },
      "Contracts_ReferenceTransportMode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceTransportChain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "line_item": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "legs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "line_item"
        ]
      },
      "Contracts_ReferenceTransportLeg": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "position": {
            "type": "integer"
          },
          "chain": {},
          "mode": {},
          "source_well": {
            "default": null,
            "nullable": true
          },
          "source_commercial_facility": {
            "default": null,
            "nullable": true
          },
          "source_facility": {
            "default": null,
            "nullable": true
          },
          "destination_commercial_facility": {},
          "destination_facility": {
            "default": null,
            "nullable": true
          },
          "volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "custodian_organization": {},
          "custodian_entity": {
            "default": null,
            "nullable": true
          },
          "is_custody_transfer": {
            "type": "boolean",
            "default": false
          },
          "is_chain_source": {
            "type": "boolean",
            "default": false
          },
          "is_chain_destination": {
            "type": "boolean",
            "default": false
          },
          "fee": {
            "default": null,
            "nullable": true
          },
          "carrier_organization": {
            "default": null,
            "nullable": true
          },
          "carrier_entity": {
            "default": null,
            "nullable": true
          },
          "carrier_user": {
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "chain",
          "custodian_organization",
          "destination_commercial_facility",
          "mode",
          "position"
        ]
      },
      "Contracts_ReferencePremium": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "line_item": {},
          "name": {
            "type": "string",
            "default": "Premium",
            "maxLength": 255
          },
          "amount": {
            "type": "number"
          },
          "currency": {},
          "measurement_unit": {
            "default": 2
          },
          "paid_by": {},
          "paid_to": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "amount",
          "currency",
          "line_item",
          "paid_by",
          "paid_to"
        ]
      },
      "Contracts_ReferenceFee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "line_item": {},
          "type": {},
          "fee_category": {},
          "currency": {},
          "unit_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "measurement_unit": {
            "default": null,
            "nullable": true
          },
          "base_cost": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "currency",
          "fee_category",
          "line_item",
          "type"
        ]
      },
      "Contracts_ReferenceFeeType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          },
          "fee_category": {}
        },
        "required": [
          "fee_category",
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceFeeCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceLogicalOperator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          },
          "symbol": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code",
          "symbol"
        ]
      },
      "Contracts_ReferenceComparisonOperator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          },
          "symbol": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code",
          "symbol"
        ]
      },
      "Contracts_ReferenceConditionGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "provision": {},
          "parent_group": {
            "default": null,
            "nullable": true
          },
          "logical_operator": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "logical_operator",
          "provision"
        ]
      },
      "Contracts_ReferencePricingCondition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "group": {},
          "measurement_property": {},
          "measurement_unit": {},
          "comparison_operator": {},
          "value": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "comparison_operator",
          "group",
          "measurement_property",
          "measurement_unit",
          "value"
        ]
      },
      "Contracts_ReferencePricingProvision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {},
          "line_item": {},
          "description": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "fee": {}
        },
        "required": [
          "fee",
          "line_item",
          "type"
        ]
      },
      "Contracts_ReferencePricingProvisionType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Contracts_ReferenceLegalProvisionType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "organization": {}
        },
        "required": [
          "content",
          "name",
          "organization",
          "short_code"
        ]
      },
      "Contracts_ReferencePaper": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "contract": {},
          "paper_from": {},
          "external_id": {
            "type": "string",
            "default": null,
            "maxLength": 255,
            "nullable": true
          },
          "governing_gtc": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "contract",
          "governing_gtc",
          "paper_from"
        ]
      },
      "Contracts_ReferencePaperLegalProvision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "paper": {},
          "provision": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "paper",
          "provision"
        ]
      },
      "Contracts_ReferencePaperPricingProvision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "paper": {},
          "provision": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "paper",
          "provision"
        ]
      },
      "Contracts_ReferenceGeneralTermsAndConditions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content",
          "name",
          "short_code"
        ]
      },
      "Messages_ReferenceMessageThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "type"
        ]
      },
      "Messages_ReferenceMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {},
          "from_user": {},
          "reply_to": {
            "default": null,
            "nullable": true
          },
          "message": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "from_user",
          "message",
          "thread"
        ]
      },
      "Messages_ReferenceMessageThreadParticipant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {},
          "user": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "thread",
          "user"
        ]
      },
      "Messages_ReferenceMessageThreadOrganization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {},
          "organization": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "organization",
          "thread"
        ]
      },
      "Messages_ReferenceThreadType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Messages_ReferenceContractThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {},
          "contract": {}
        },
        "required": [
          "contract",
          "thread"
        ]
      },
      "Messages_ReferenceScheduleThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {},
          "schedule": {}
        },
        "required": [
          "schedule",
          "thread"
        ]
      },
      "Messages_ReferenceLineItemThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {},
          "line_item": {}
        },
        "required": [
          "line_item",
          "thread"
        ]
      },
      "Messages_ReferenceUserThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {},
          "user": {}
        },
        "required": [
          "thread",
          "user"
        ]
      },
      "Messages_ReferenceEntityThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "thread": {},
          "entity": {}
        },
        "required": [
          "entity",
          "thread"
        ]
      },
      "Currency_ReferenceCurrency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "symbol"
        ]
      },
      "Currency_ReferenceCurrencyConversion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "from_currency": {
            "type": "integer"
          },
          "to_currency": {
            "type": "integer"
          },
          "exchange_rate": {
            "type": "number"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "exchange_rate"
        ]
      },
      "Pricing_ReferenceWadf": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "type": {},
          "stream": {},
          "amount": {
            "type": "number"
          },
          "currency": {},
          "measurement_unit": {}
        },
        "required": [
          "amount",
          "currency",
          "measurement_unit",
          "name",
          "stream",
          "type"
        ]
      },
      "Pricing_ReferenceWadfType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Pricing_ReferenceEqualization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "stream": {},
          "measurement_unit": {
            "default": 2
          },
          "formula": {
            "type": "string"
          }
        },
        "required": [
          "formula",
          "name",
          "stream"
        ]
      },
      "Pricing_ReferencePricingBasis": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Pricing_ReferenceIndex": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          },
          "stream": {}
        },
        "required": [
          "name",
          "short_code",
          "stream"
        ]
      },
      "Pricing_ReferencePriceBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "short_code": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "short_code"
        ]
      },
      "Entity_ReferenceEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "legal_name": {
            "type": "string"
          },
          "organization": {
            "default": null,
            "nullable": true
          },
          "url": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "email": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "unit": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "street": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "city": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "zip_code": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "province": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "state": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "country": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "START",
              "INACTIVE_REACTIVATE_ELIGIBLE",
              "LIQUIDATION",
              "NON_REGISTERED",
              "DISCONTINUED_NO_REACTIVATION",
              "DISSOLVED",
              "CONTINUED_OUT",
              "ACTIVE",
              "STRUCK",
              "CONTINUED_OUT_AMALGAMATED",
              "AMALGAMATED",
              "DISSOLUTION/DISSOLVED"
            ]
          },
          "effective_date": {
            "type": "string",
            "format": "date"
          },
          "successor": {
            "default": null,
            "nullable": true
          },
          "business_lines": {
            "readOnly": true
          }
        },
        "required": [
          "effective_date",
          "legal_name"
        ]
      },
      "Entity_ReferenceBusinessLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Facility_ReferenceFacilityType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "model": {
            "type": "string",
            "enum": [
              "Terminal",
              "Station",
              "Plant",
              "Battery",
              "System",
              "Pipeline",
              "Rail Line"
            ]
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "Facility_ReferenceFacilitySubType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "Facility_ReferenceFacility": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "lsd": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "section": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "township": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "range": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "meridian": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "type": {},
          "sub_type": {},
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "operator": {},
          "operational_status": {
            "type": "string",
            "enum": [
              "ABANDONED",
              "ACTIVE",
              "CANCELLED",
              "MINSUSPEND",
              "NEW",
              "NONREPORTING",
              "RECCERTIFIED",
              "RECEXEMPT",
              "RETIRED",
              "SUSPENDED"
            ]
          },
          "operator_start_date": {
            "type": "string",
            "format": "date"
          },
          "licensee": {
            "default": null,
            "nullable": true
          },
          "license_status": {
            "type": "string",
            "enum": [
              "ABANDONED",
              "AMMENDED",
              "CANCELLED",
              "DECOMMISSION",
              "ISSUED",
              "RE-ENTERED",
              "RECCERTIFIED",
              "RECEXEMPT",
              "SUSPENDED",
              "SUSPENSION"
            ]
          },
          "license_type": {
            "type": "string",
            "enum": [
              "WELL",
              "FACILITY"
            ]
          },
          "license_number": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "license_issued": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "regulator_id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          }
        },
        "required": [
          "name",
          "operator",
          "operator_start_date",
          "start_date",
          "sub_type",
          "type"
        ]
      },
      "Wells_ReferenceWell": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "uwi": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "location_exception": {
            "type": "string"
          },
          "event_sequence": {
            "type": "string"
          },
          "lsd": {
            "type": "integer"
          },
          "section": {
            "type": "integer"
          },
          "township": {
            "type": "integer"
          },
          "range": {
            "type": "integer"
          },
          "meridian": {
            "type": "string"
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "ALBERTA",
              "SASKATCHEWAN"
            ]
          },
          "licensee": {},
          "license_status": {
            "type": "string",
            "enum": [
              "ABANDONED",
              "AMMENDED",
              "CANCELLED",
              "DECOMMISSION",
              "ISSUED",
              "RE-ENTERED",
              "RECCERTIFIED",
              "RECEXEMPT",
              "SUSPENDED",
              "SUSPENSION"
            ]
          },
          "license_type": {
            "type": "string",
            "enum": [
              "WELL",
              "FACILITY"
            ]
          },
          "license_number": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "license_issued": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "regulator_id": {
            "type": "string"
          },
          "regulator_system": {
            "type": "string",
            "enum": [
              "PETRINEX"
            ]
          }
        },
        "required": [
          "event_sequence",
          "licensee",
          "location_exception",
          "lsd",
          "meridian",
          "range",
          "regulator_id",
          "section",
          "township",
          "uwi"
        ]
      },
      "Volumes_ReferenceMeter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "facility": {
            "default": null,
            "nullable": true
          },
          "operator": {}
        },
        "required": [
          "external_id",
          "operator"
        ]
      },
      "Volumes_ReferenceTicketStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "Volumes_ReferenceTicketCode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "Volumes_ReferenceTruckTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "readOnly": true
          },
          "organization": {
            "readOnly": true
          },
          "bill_of_lading": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "load_ticket": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "carrier_organization": {
            "default": null,
            "nullable": true
          },
          "carrier_entity": {
            "default": null,
            "nullable": true
          },
          "driver": {
            "default": null,
            "nullable": true
          },
          "source_commercial_facility": {
            "default": null,
            "nullable": true
          },
          "source_commercial_entity": {
            "default": null,
            "nullable": true
          },
          "source_facility_operator": {
            "default": null,
            "nullable": true
          },
          "source_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "source_facility": {
            "default": null,
            "nullable": true
          },
          "source_well": {
            "default": null,
            "nullable": true
          },
          "destination_commercial_facility": {
            "default": null,
            "nullable": true
          },
          "destination_commercial_entity": {
            "default": null,
            "nullable": true
          },
          "destination_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "destination_facility_operator": {
            "default": null,
            "nullable": true
          },
          "destination_facility": {
            "default": null,
            "nullable": true
          },
          "production_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "meter": {
            "default": null,
            "nullable": true
          },
          "meter_start": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_end": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "meter_factor": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "load_volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "load_volume_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "net_volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "net_volume_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "density": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "density_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "bsw": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "bsw_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "solids": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "solids_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "water": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "water_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "temperature_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "codes": {
            "readOnly": true
          },
          "product_category": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "external_id",
          "organization",
          "reference",
          "status"
        ]
      },
      "Volumes_ReferenceTruckTicketError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "field_name": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "error_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "resolved_at": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "resolved_by": {
            "type": "integer"
          }
        },
        "required": [
          "error_message",
          "error_type",
          "field_name"
        ]
      },
      "Volumes_RequestTruckTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "readOnly": true
          },
          "organization": {
            "type": "integer",
            "readOnly": true
          },
          "bill_of_lading": {
            "type": "string"
          },
          "load_ticket": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "carrier_organization": {
            "type": "integer"
          },
          "carrier_entity": {
            "default": null,
            "nullable": true
          },
          "driver": {
            "type": "integer",
            "nullable": true
          },
          "source_commercial_facility": {
            "type": "integer"
          },
          "source_commercial_entity": {
            "type": "integer"
          },
          "source_facility_operator": {
            "type": "integer"
          },
          "source_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "source_facility": {
            "type": "integer"
          },
          "source_well": {
            "type": "integer"
          },
          "destination_commercial_facility": {
            "type": "integer"
          },
          "destination_commercial_entity": {
            "type": "integer"
          },
          "destination_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "destination_facility_operator": {
            "type": "integer"
          },
          "destination_facility": {
            "type": "integer"
          },
          "production_date": {
            "type": "string",
            "format": "date-time"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "meter": {
            "type": "integer"
          },
          "meter_start": {
            "type": "number"
          },
          "meter_end": {
            "type": "number"
          },
          "meter_measurement_unit": {
            "type": "integer"
          },
          "meter_factor": {
            "type": "number"
          },
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {
            "type": "integer"
          },
          "load_volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "load_volume_measurement_unit": {
            "type": "integer",
            "nullable": true
          },
          "density": {
            "type": "number"
          },
          "density_measurement_unit": {
            "type": "integer"
          },
          "bsw": {
            "type": "number"
          },
          "bsw_measurement_unit": {
            "type": "integer"
          },
          "solids": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "solids_measurement_unit": {
            "type": "integer",
            "nullable": true
          },
          "water": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "water_measurement_unit": {
            "type": "integer",
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "temperature_measurement_unit": {
            "type": "integer",
            "nullable": true
          },
          "codes": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "errors": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "bill_of_lading",
          "bsw",
          "bsw_measurement_unit",
          "carrier_organization",
          "codes",
          "density",
          "density_measurement_unit",
          "destination_commercial_entity",
          "destination_commercial_facility",
          "destination_facility",
          "destination_facility_operator",
          "end",
          "external_id",
          "meter",
          "meter_end",
          "meter_factor",
          "meter_start",
          "production_date",
          "reference",
          "source_commercial_entity",
          "source_commercial_facility",
          "source_facility",
          "source_facility_operator",
          "source_well",
          "start",
          "volume"
        ]
      },
      "Volumes_ReferenceTankTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "readOnly": true
          },
          "organization": {
            "readOnly": true
          },
          "commercial_facility": {
            "default": null,
            "nullable": true
          },
          "facility_operator": {
            "default": null,
            "nullable": true
          },
          "facility": {
            "default": null,
            "nullable": true
          },
          "production_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "meter": {
            "default": null,
            "nullable": true
          },
          "meter_start": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_end": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "meter_factor": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "net_volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "net_volume_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "density": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "density_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "bsw": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "bsw_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "solids": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "solids_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "water": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "water_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "temperature_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "codes": {
            "readOnly": true
          }
        },
        "required": [
          "external_id",
          "organization",
          "reference",
          "status"
        ]
      },
      "Volumes_ReferenceTankTicketError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "field_name": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "error_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "resolved_at": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "resolved_by": {
            "type": "integer"
          }
        },
        "required": [
          "error_message",
          "error_type",
          "field_name"
        ]
      },
      "Volumes_RequestTankTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "readOnly": true
          },
          "organization": {
            "type": "integer",
            "readOnly": true
          },
          "commercial_facility": {
            "type": "integer"
          },
          "facility_operator": {
            "type": "integer"
          },
          "facility": {
            "type": "integer"
          },
          "production_date": {
            "type": "string",
            "format": "date-time"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "meter": {
            "type": "integer"
          },
          "meter_start": {
            "type": "number"
          },
          "meter_end": {
            "type": "number"
          },
          "meter_measurement_unit": {
            "type": "integer"
          },
          "meter_factor": {
            "type": "number"
          },
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {
            "type": "integer"
          },
          "density": {
            "type": "number"
          },
          "density_measurement_unit": {
            "type": "integer"
          },
          "bsw": {
            "type": "number"
          },
          "bsw_measurement_unit": {
            "type": "integer"
          },
          "solids": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "solids_measurement_unit": {
            "type": "integer",
            "nullable": true
          },
          "water": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "water_measurement_unit": {
            "type": "integer",
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "temperature_measurement_unit": {
            "type": "integer",
            "nullable": true
          },
          "commercial_entity": {
            "type": "integer"
          },
          "codes": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "errors": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "bsw",
          "bsw_measurement_unit",
          "codes",
          "commercial_entity",
          "commercial_facility",
          "density",
          "density_measurement_unit",
          "end",
          "external_id",
          "facility",
          "facility_operator",
          "meter",
          "meter_end",
          "meter_factor",
          "meter_start",
          "production_date",
          "reference",
          "start",
          "volume"
        ]
      },
      "Volumes_ReferenceMeterTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "readOnly": true
          },
          "organization": {
            "readOnly": true
          },
          "source_commercial_facility": {
            "default": null,
            "nullable": true
          },
          "source_commercial_entity": {
            "default": null,
            "nullable": true
          },
          "source_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "source_facility_operator": {
            "default": null,
            "nullable": true
          },
          "source_facility": {
            "default": null,
            "nullable": true
          },
          "source_well": {
            "default": null,
            "nullable": true
          },
          "destination_commercial_facility": {
            "default": null,
            "nullable": true
          },
          "destination_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "destination_commercial_entity": {
            "default": null,
            "nullable": true
          },
          "destination_facility_operator": {
            "default": null,
            "nullable": true
          },
          "destination_facility": {
            "default": null,
            "nullable": true
          },
          "production_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "meter": {
            "default": null,
            "nullable": true
          },
          "meter_start": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_end": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "meter_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "meter_factor": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "volume_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "net_volume": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "net_volume_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "density": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "density_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "bsw": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "bsw_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "solids": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "solids_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "water": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "water_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "temperature_measurement_unit": {
            "default": null,
            "nullable": true
          },
          "codes": {
            "readOnly": true
          },
          "product_category": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "external_id",
          "organization",
          "reference",
          "status"
        ]
      },
      "Volumes_ReferenceMeterTicketError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "field_name": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "error_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "resolved_at": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "resolved_by": {
            "type": "integer"
          }
        },
        "required": [
          "error_message",
          "error_type",
          "field_name"
        ]
      },
      "Volumes_RequestMeterTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "external_id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "readOnly": true
          },
          "organization": {
            "type": "integer",
            "readOnly": true
          },
          "source_commercial_facility": {
            "type": "integer"
          },
          "source_commercial_entity": {
            "type": "integer"
          },
          "source_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "source_facility_operator": {
            "type": "integer"
          },
          "source_facility": {
            "type": "integer"
          },
          "source_well": {
            "type": "integer"
          },
          "destination_commercial_facility": {
            "type": "integer"
          },
          "destination_commercial_organization": {
            "default": null,
            "nullable": true
          },
          "destination_commercial_entity": {
            "type": "integer"
          },
          "destination_facility_operator": {
            "type": "integer"
          },
          "destination_facility": {
            "type": "integer"
          },
          "production_date": {
            "type": "string",
            "format": "date-time"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "meter": {
            "type": "integer"
          },
          "meter_start": {
            "type": "number"
          },
          "meter_end": {
            "type": "number"
          },
          "meter_measurement_unit": {
            "type": "integer"
          },
          "meter_factor": {
            "type": "number"
          },
          "volume": {
            "type": "number"
          },
          "volume_measurement_unit": {
            "type": "integer"
          },
          "density": {
            "type": "number"
          },
          "density_measurement_unit": {
            "type": "integer"
          },
          "bsw": {
            "type": "number"
          },
          "bsw_measurement_unit": {
            "type": "integer"
          },
          "solids": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "solids_measurement_unit": {
            "type": "integer",
            "nullable": true
          },
          "water": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "water_measurement_unit": {
            "type": "integer",
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "default": null,
            "nullable": true
          },
          "temperature_measurement_unit": {
            "type": "integer",
            "nullable": true
          },
          "codes": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "errors": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "bsw",
          "bsw_measurement_unit",
          "codes",
          "density",
          "density_measurement_unit",
          "destination_commercial_entity",
          "destination_commercial_facility",
          "destination_facility",
          "destination_facility_operator",
          "end",
          "external_id",
          "meter",
          "meter_end",
          "meter_factor",
          "meter_start",
          "production_date",
          "reference",
          "source_commercial_entity",
          "source_commercial_facility",
          "source_facility",
          "source_facility_operator",
          "source_well",
          "start",
          "volume"
        ]
      },
      "Integrations_ReferenceCommercialFacilityLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "commercial_facility": {},
          "organization": {},
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "commercial_facility",
          "name",
          "organization",
          "start_date"
        ]
      },
      "Integrations_ReferenceFacilityLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "facility": {},
          "organization": {},
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "facility",
          "name",
          "organization",
          "start_date"
        ]
      },
      "Integrations_ReferenceEntityLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "entity": {},
          "organization": {},
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "entity",
          "name",
          "organization",
          "start_date"
        ]
      },
      "Integrations_ReferenceWellLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "well": {},
          "organization": {},
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "organization",
          "start_date",
          "well"
        ]
      },
      "Integrations_ReferenceOrganizationLookup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "organization_lookup": {},
          "organization": {},
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "organization",
          "organization_lookup",
          "start_date"
        ]
      },
      "Service_ReferenceJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "queue_name": {
            "type": "string"
          },
          "queue_function": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "T",
              "M"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "QUEUED",
              "STARTED",
              "FINISHED",
              "FAILED",
              "SCHEDULED"
            ]
          },
          "enqueued_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "queue_function",
          "queue_name",
          "type"
        ]
      },
      "Service_ReferenceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "organization": {},
          "method": {
            "type": "string",
            "enum": [
              "G",
              "P",
              "D"
            ]
          },
          "endpoint": {
            "type": "string"
          },
          "status_code": {
            "type": "integer",
            "enum": [
              "200",
              "201",
              "202",
              "204",
              "206",
              "300",
              "301",
              "302",
              "303",
              "304",
              "307",
              "308",
              "400",
              "401",
              "403",
              "404",
              "405",
              "406",
              "408",
              "409",
              "410",
              "411",
              "412",
              "413",
              "414",
              "415",
              "416",
              "417",
              "422",
              "429",
              "500",
              "501",
              "502",
              "503",
              "504",
              "505"
            ]
          },
          "status": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "user_agent": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "duration_ms": {
            "type": "integer",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "endpoint",
          "method",
          "organization"
        ]
      }
    }
  },
  "paths": {
    "/facilities": {
      "get": {
        "summary": "List Facilities",
        "description": "Retrieve a list of facilities with pagination and filtering options.",
        "operationId": "get_facilities",
        "tags": [
          "Facilities"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by facility name"
          },
          {
            "in": "query",
            "name": "type_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by facility type ID"
          },
          {
            "in": "query",
            "name": "subtype_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by facility subtype ID"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by facility status"
          },
          {
            "in": "query",
            "name": "operator_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by operator ID"
          },
          {
            "in": "query",
            "name": "licensee_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by licensee ID"
          },
          {
            "in": "query",
            "name": "regulator_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by regulator ID"
          },
          {
            "in": "query",
            "name": "model_name",
            "schema": {
              "type": "string",
              "enum": [
                "Terminal",
                "Station",
                "Plant",
                "Battery",
                "System",
                "Pipeline",
                "Rail Line"
              ]
            },
            "description": "Filter by facility model name"
          },
          {
            "in": "query",
            "name": "lsd",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by legal subdivision (LSD)"
          },
          {
            "in": "query",
            "name": "section",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by section number"
          },
          {
            "in": "query",
            "name": "township",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by township number"
          },
          {
            "in": "query",
            "name": "range",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by range number"
          },
          {
            "in": "query",
            "name": "meridian",
            "schema": {
              "type": "string"
            },
            "description": "Filter by meridian"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of terminals.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Facility_ReferenceFacility"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/facilities/{id}": {
      "get": {
        "summary": "Get Facility",
        "description": "Retrieve details of a specific facility, including its name, type, subtype, status and associated entity.",
        "operationId": "get_facility",
        "tags": [
          "Facilities"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The facility ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single facility.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Facility_Facility"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Facility not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Facility not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/facilities/types": {
      "get": {
        "summary": "List Types",
        "description": "Retrieve a list of facility types with pagination and filtering options.",
        "operationId": "get_facility_types",
        "tags": [
          "Facilities"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "description": "Filter by facility type code"
          },
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string",
              "enum": [
                "Terminal",
                "Station",
                "Plant",
                "Battery",
                "System",
                "Pipeline"
              ]
            },
            "description": "Filter by facility model type"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of facility types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Facility_ReferenceFacilityType"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/facilities/subtypes": {
      "get": {
        "summary": "List Sub Types",
        "description": "Retrieve a list of facility subtypes with pagination and filtering options.",
        "operationId": "get_facility_subtypes",
        "tags": [
          "Facilities"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "description": "Filter by facility subtype code"
          },
          {
            "in": "query",
            "name": "jurisdiction",
            "schema": {
              "type": "string",
              "enum": [
                "ALBERTA",
                "SASKATCHEWAN"
              ]
            },
            "description": "Filter by jurisdiction"
          },
          {
            "in": "query",
            "name": "facility_type",
            "schema": {
              "type": "string"
            },
            "description": "Filter by facility type ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of facility subtypes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Facility_FacilitySubType"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/organization": {
      "get": {
        "summary": "Get Organization",
        "description": "Retrieve details about the current organization including associated entities, wells, and facilities.",
        "operationId": "get_organization",
        "tags": [
          "Organizations"
        ],
        "responses": {
          "200": {
            "description": "A single organization object containing organization details along with related entities, wells, terminals, plants, batteries, stations, systems and pipelines.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Organization_Organization"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "summary": "List Organizations",
        "description": "Retrieve a list of all organizations with pagination and filtering options.",
        "operationId": "get_organizations",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by organization name"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization_ReferenceOrganization"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/organization/users": {
      "get": {
        "summary": "List Users",
        "description": "Retrieve a list of users in the current organization with pagination and filtering options.",
        "operationId": "get_users",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "role_ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by role IDs"
          },
          {
            "in": "query",
            "name": "permission_ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by permission IDs"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "description": "Filter by title"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization_ReferenceUser"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/organization/users/{id}": {
      "get": {
        "summary": "Get User",
        "description": "Retrieve details about a specific user in the current organization including their roles and permissions.",
        "operationId": "get_user",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The user ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single user object containing user details along with related roles and permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Organization_ReferenceUser"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/organization/roles": {
      "get": {
        "summary": "List Roles",
        "description": "Retrieve a list of user roles in the current organization.",
        "operationId": "get_roles",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of user roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization_ReferenceUserRoles"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/organization/permissions": {
      "get": {
        "summary": "List Permissions",
        "description": "Retrieve a list of user permissions in the current organization.",
        "operationId": "get_permissions",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of user permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization_ReferenceUserPermissions"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/organization/commercial-facilities": {
      "get": {
        "summary": "List Commercial Facilities",
        "description": "List commercial facilities in the current organization with pagination and filtering options.",
        "operationId": "get_commercial_facilities",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "section",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Section"
          },
          {
            "in": "query",
            "name": "lsd",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Legal subdivision"
          },
          {
            "in": "query",
            "name": "meridian",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Meridian"
          },
          {
            "in": "query",
            "name": "range",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Range"
          },
          {
            "in": "query",
            "name": "township",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Township"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Name"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of commercial facilities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization_ReferenceCommercialFacility"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/organization/commercial-facilities/{id}": {
      "get": {
        "summary": "Get Commercial Facility",
        "description": "Retrieve details about a specific commercial facility in the current organization including their related their associated facilities.",
        "operationId": "get_commercial_facility",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The commercial facility ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single commercial facility object containing facility details along with related terminals, batteries, plants, stations, etc.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Organization_CommercialFacility"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Commercial facility not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Commercial facility not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/organization/entities": {
      "get": {
        "summary": "List Entities",
        "description": "Retrieve a list of entities in the current organization with pagination and filtering options.",
        "operationId": "get_organization_entities",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Entity_ReferenceEntity"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/organization/facilities": {
      "get": {
        "summary": "List Facilities",
        "description": "Retrieve a list of facilities in the current organization with pagination and filtering options.",
        "operationId": "get_organization_facilities",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Facility_ReferenceFacility"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/currencies": {
      "get": {
        "summary": "List Currencies",
        "description": "Retrieve a list of currencies with pagination.",
        "operationId": "get_currencies",
        "tags": [
          "Currencies"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of currencies.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Currency_ReferenceCurrency"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/currencies/convert": {
      "post": {
        "summary": "Convert Between Currencies",
        "description": "Retrieve the exchange rate between two currencies and convert a value.",
        "operationId": "convert_currency",
        "tags": [
          "Currencies"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "value",
                  "from_currency",
                  "to_currency"
                ],
                "properties": {
                  "value": {
                    "type": "number",
                    "description": "The value to convert"
                  },
                  "from_currency": {
                    "type": "string",
                    "description": "The symbol of the currency to convert from"
                  },
                  "to_currency": {
                    "type": "string",
                    "description": "The symbol of the currency to convert to"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The converted value and exchange rate between the two currencies.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "number"
                            },
                            "currency": {
                              "$ref": "#/components/schemas/Currency_ReferenceCurrency"
                            }
                          }
                        },
                        "to": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "number"
                            },
                            "currency": {
                              "$ref": "#/components/schemas/Currency_ReferenceCurrency"
                            }
                          }
                        },
                        "conversion": {
                          "$ref": "#/components/schemas/Currency_ReferenceCurrencyConversion"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Conversion not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Conversion not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/wadfs": {
      "get": {
        "summary": "List Wadfs",
        "description": "Retrieve a list of wadfs with pagination.",
        "operationId": "get_wadfs",
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of wadfs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pricing_ReferenceWadf"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/wadfs/{id}": {
      "get": {
        "summary": "Get Wadf",
        "description": "Retrieve details about a specific wadf.",
        "operationId": "get_wadf",
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The wadf ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single wadf object containing wadf details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Pricing_Wadf"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Wadf not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Wadf not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/wadfs/types": {
      "get": {
        "summary": "List Wadf Types",
        "description": "Retrieve a list of wadf types with pagination.",
        "operationId": "get_wadf_types",
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of wadf types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pricing_ReferenceWadfType"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/equalizations": {
      "get": {
        "summary": "List Equalizations",
        "description": "Retrieve a list of equalizations with pagination.",
        "operationId": "get_equalizations",
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of equalizations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pricing_ReferenceEqualization"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/equalizations/{id}": {
      "get": {
        "summary": "Get Equalization",
        "description": "Retrieve details about a specific equalization.",
        "operationId": "get_equalization",
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The equalization ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single equalization object containing equalization details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Pricing_Equalization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Equalization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Equalization not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/indexes": {
      "get": {
        "summary": "List Indexes",
        "description": "Retrieve a list of indexes with pagination.",
        "operationId": "get_indexes",
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "stream",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The stream to filter by"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of indexes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pricing_ReferenceIndex"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/indexes/{id}": {
      "get": {
        "summary": "Get Index",
        "description": "Retrieve details about a specific index.",
        "operationId": "get_index",
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The index ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single index object containing index details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Pricing_Index"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Index not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Index not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/price-bases": {
      "get": {
        "summary": "List Price Bases",
        "description": "Retrieve a list of price bases with pagination.",
        "operationId": "get_price_bases",
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of price bases.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pricing_ReferencePriceBase"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/price-bases/{id}": {
      "get": {
        "summary": "Get Price Base",
        "description": "Retrieve details about a specific price base.",
        "operationId": "get_price_base",
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The price base ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single price base object containing price base details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Pricing_PriceBase"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Price base not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Price base not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/products/categories": {
      "get": {
        "summary": "List Product Categories",
        "description": "Retrieve a list of product categories with pagination and filtering options.",
        "operationId": "get_product_categories",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of product categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Products_ReferenceProductCategory"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/products/categories/{id}": {
      "get": {
        "summary": "Get Product Category",
        "description": "Retrieve details of a specific product category, including its name, specifications, and measurement units.",
        "operationId": "get_product_category",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The product category ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single product category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Products_ProductCategory"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product category not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Product category not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/products/categories/commercial-bands": {
      "get": {
        "summary": "List Product Category Commercial Bands",
        "description": "Retrieve a list of product category commercial bands in the current organization with pagination and filtering options.",
        "operationId": "get_product_categories_commercial_bands",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "product_category_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by product category ID"
          },
          {
            "in": "query",
            "name": "commercial_facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by commercial facility ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of product category commercial bands.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Products_ReferenceCommercialBand"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/products/categories/commercial-bands/{id}": {
      "get": {
        "summary": "Get Product Category Commercial Band",
        "description": "Retrieve details of a specific product category commercial band in the current organization, including its measurement bounds and units.",
        "operationId": "get_product_category_commercial_band",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID of the product category commercial band."
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the product category commercial band.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Products_CommercialBand"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product category commercial band not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Product category commercial band not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/products/categories/mechanical-bands": {
      "get": {
        "summary": "List Product Category Mechanical Bands",
        "description": "Retrieve a list of product category mechanical bands with pagination and filtering options.",
        "operationId": "get_product_categories_mechanical_bands",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "product_category_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by product category ID"
          },
          {
            "in": "query",
            "name": "facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by facility ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of product category mechanical bands.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Products_ReferenceMechanicalBand"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/products/categories/mechanical-bands/{id}": {
      "get": {
        "summary": "Get Product Category Mechanical Band",
        "description": "Retrieve details of a specific product category mechanical band, including its measurement bounds and units.",
        "operationId": "get_product_category_mechanical_band",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The ID of the product category mechanical band."
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the product category mechanical band.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Products_MechanicalBand"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product category mechanical band not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Product Category Mechanical band not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "summary": "Ping Server",
        "description": "Check the server health.",
        "operationId": "ping",
        "tags": [
          "Services"
        ],
        "responses": {
          "200": {
            "description": "Server is running.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "pong"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "summary": "List Jobs",
        "description": "Retrieve a paginated list of jobs with filtering options.",
        "operationId": "get_jobs",
        "tags": [
          "Services"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "TANK_TICKET",
                "METER_TICKET",
                "TRUCK_TICKET"
              ]
            },
            "description": "Filter by job type"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "QUEUED",
                "STARTED",
                "FINISHED",
                "FAILED",
                "SCHEDULED"
              ]
            },
            "description": "Filter by job status"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of jobs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Service_ReferenceJob"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "summary": "Get Job",
        "description": "Retrieve details of a specific job.",
        "operationId": "get_job",
        "tags": [
          "Services"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The job ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single job.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Service_Job"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Job not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Job not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/requests": {
      "get": {
        "summary": "List Requests",
        "description": "Retrieve a paginated list of requests with filtering options.",
        "operationId": "get_requests",
        "tags": [
          "Services"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "method",
            "schema": {
              "type": "string",
              "enum": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH"
              ]
            },
            "description": "Filter by request method"
          },
          {
            "in": "query",
            "name": "status_code",
            "schema": {
              "type": "integer",
              "enum": [
                200,
                201,
                202,
                204,
                206,
                300,
                301,
                302,
                303,
                304,
                307,
                308,
                400,
                401,
                403,
                404,
                405,
                406,
                408,
                409,
                410,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                422,
                429,
                500,
                501,
                502,
                503,
                504,
                505
              ]
            },
            "description": "Filter by status code"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Service_ReferenceRequest"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/requests/{id}": {
      "get": {
        "summary": "Get Request",
        "description": "Retrieve details of a specific request.",
        "operationId": "get_request",
        "tags": [
          "Services"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The request ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Service_Request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Request not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Request not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/meters": {
      "get": {
        "summary": "List Meters",
        "description": "Retrieve a list of meters.",
        "operationId": "get_meters",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "regulator_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by regulator ID (searches across connected facilities)"
          },
          {
            "in": "query",
            "name": "facility_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by facility ID"
          },
          {
            "in": "query",
            "name": "operator_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by operator ID"
          },
          {
            "in": "query",
            "name": "external_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by external ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of meters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Volumes_ReferenceMeter"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/meters/{id}": {
      "get": {
        "summary": "Get Meter",
        "description": "Retrieve a single meter by ID.",
        "operationId": "get_meter",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The meter ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single meter.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Volumes_Meter"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Meter not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Meter not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/statuses": {
      "get": {
        "summary": "List Ticket Statuses",
        "description": "Retrieve a list of ticket statuses with pagination options.",
        "operationId": "get_ticket_statuses",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of ticket statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Volumes_ReferenceTicketStatus"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/codes": {
      "get": {
        "summary": "List Ticket Codes",
        "description": "Retrieve a list of ticket codes with pagination options.",
        "operationId": "get_ticket_codes",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter by code"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of ticket codes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Volumes_ReferenceTicketCode"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/truck": {
      "get": {
        "summary": "List Truck Tickets",
        "description": "Retrieve a list of truck tickets with pagination.",
        "operationId": "get_truck_tickets",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "status_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by ticket status ID"
          },
          {
            "in": "query",
            "name": "production_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false,
            "description": "Filter by production date (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "external_id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter by external ID"
          },
          {
            "in": "query",
            "name": "carrier_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by carrier ID"
          },
          {
            "in": "query",
            "name": "bill_of_laiden",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter by bill of laiden"
          },
          {
            "in": "query",
            "name": "rack_ticket",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter by rack ticket"
          },
          {
            "in": "query",
            "name": "source_commercial_facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source commercial facility ID"
          },
          {
            "in": "query",
            "name": "source_commercial_entity_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source commercial entity ID"
          },
          {
            "in": "query",
            "name": "source_commercial_organization_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source commercial organization ID"
          },
          {
            "in": "query",
            "name": "source_facility_operator_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source facility operator ID"
          },
          {
            "in": "query",
            "name": "source_facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source facility ID"
          },
          {
            "in": "query",
            "name": "source_well_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source well ID"
          },
          {
            "in": "query",
            "name": "destination_commercial_facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by destination commercial facility ID"
          },
          {
            "in": "query",
            "name": "destination_commercial_entity_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by destination commercial entity ID"
          },
          {
            "in": "query",
            "name": "destination_commercial_organization_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by destination commercial organization ID"
          },
          {
            "in": "query",
            "name": "destination_facility_operator_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by destination facility operator ID"
          },
          {
            "in": "query",
            "name": "destination_facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by destination facility ID"
          },
          {
            "in": "query",
            "name": "meter_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by meter ID"
          },
          {
            "in": "query",
            "name": "ticket_code",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by ticket code"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of truck tickets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Volumes_ReferenceTruckTicket"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create Truck Ticket",
        "description": "Create a new truck ticket",
        "operationId": "create_truck_ticket",
        "tags": [
          "Volumes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Volumes_RequestTruckTicket"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tank ticket queued for creation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/truck/{id}": {
      "get": {
        "summary": "Get Truck Ticket",
        "description": "Retrieve a single truck ticket by ID.",
        "operationId": "get_truck_ticket",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The truck ticket ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single truck ticket.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Volumes_TruckTicket"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Truck ticket not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Truck ticket not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "summary": "Update Truck Ticket",
        "description": "Update an existing truck ticket by ID.",
        "operationId": "update_truck_ticket",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The truck ticket ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Volumes_ReferenceTruckTicket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Truck ticket queued for update.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Truck ticket not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Truck ticket not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/truck/{id}/cancel": {
      "patch": {
        "summary": "Cancel Truck Ticket",
        "description": "Cancel an existing truck ticket by ID.",
        "operationId": "cancel_truck_ticket",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The truck ticket ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Truck ticket queued for cancelation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Truck ticket not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Truck ticket not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/tank": {
      "get": {
        "summary": "List Tank Tickets",
        "description": "Retrieve a list of tank tickets with pagination.",
        "operationId": "get_tank_tickets",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "status_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by ticket status ID"
          },
          {
            "in": "query",
            "name": "production_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false,
            "description": "Filter by production date (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "external_id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter by external ID"
          },
          {
            "in": "query",
            "name": "commercial_facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by commercial facility ID"
          },
          {
            "in": "query",
            "name": "commercial_entity_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by commercial entity ID"
          },
          {
            "in": "query",
            "name": "facility_operator_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by facility operator ID"
          },
          {
            "in": "query",
            "name": "facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by facility ID"
          },
          {
            "in": "query",
            "name": "meter_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by meter ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of tank tickets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Volumes_ReferenceTankTicket"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create Tank Ticket",
        "description": "Create a new tank ticket",
        "operationId": "create_tank_ticket",
        "tags": [
          "Volumes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Volumes_RequestTankTicket"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tank ticket queued for creation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/tank/{id}": {
      "get": {
        "summary": "Get Tank Ticket",
        "description": "Retrieve a single tank ticket by ID.",
        "operationId": "get_tank_ticket",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The tank ticket ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single tank ticket.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Volumes_TankTicket"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tank ticket not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Tank ticket not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "summary": "Update Tank Ticket",
        "description": "Update an existing tank ticket by ID.",
        "operationId": "update_tank_ticket",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The tank ticket ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Volumes_RequestTankTicket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tank ticket queued for update.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tank ticket not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Tank ticket not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/tank/{id}/cancel": {
      "patch": {
        "summary": "Cancel Tank Ticket",
        "description": "Cancel an existing tank ticket by ID.",
        "operationId": "cancel_tank_ticket",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The tank ticket ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Tank ticket queued for cancelation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Tank ticket not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Tank ticket not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/meter": {
      "get": {
        "summary": "List Meter Tickets",
        "description": "Retrieve a list of meter tickets with pagination.",
        "operationId": "get_meter_tickets",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "status_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by ticket status ID"
          },
          {
            "in": "query",
            "name": "production_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false,
            "description": "Filter by production date (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "external_id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter by external ID"
          },
          {
            "in": "query",
            "name": "source_commercial_facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source commercial facility ID"
          },
          {
            "in": "query",
            "name": "source_commercial_entity_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source commercial entity ID"
          },
          {
            "in": "query",
            "name": "source_commercial_organization_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source commercial organization ID"
          },
          {
            "in": "query",
            "name": "source_facility_operator_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source facility operator ID"
          },
          {
            "in": "query",
            "name": "source_facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source facility ID"
          },
          {
            "in": "query",
            "name": "source_well_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by source well ID"
          },
          {
            "in": "query",
            "name": "destination_commercial_facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by destination commercial facility ID"
          },
          {
            "in": "query",
            "name": "destination_commercial_entity_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by destination commercial entity ID"
          },
          {
            "in": "query",
            "name": "destination_facility_operator_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by destination facility operator ID"
          },
          {
            "in": "query",
            "name": "destination_commercial_organization_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by destination commercial organization ID"
          },
          {
            "in": "query",
            "name": "destination_facility_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by destination facility ID"
          },
          {
            "in": "query",
            "name": "meter_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by meter ID"
          },
          {
            "in": "query",
            "name": "ticket_code",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by ticket code"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of meter tickets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Volumes_ReferenceMeterTicket"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create Meter Ticket",
        "description": "Create a new meter ticket",
        "operationId": "create_meter_ticket",
        "tags": [
          "Volumes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Volumes_RequestMeterTicket"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Meter ticket queued for creation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/meter/{id}": {
      "get": {
        "summary": "Get Meter Ticket",
        "description": "Retrieve a single meter ticket by ID.",
        "operationId": "get_meter_ticket",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The meter ticket ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single meter ticket.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Volumes_MeterTicket"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Meter ticket not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Meter ticket not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "summary": "Update Meter Ticket",
        "description": "Update an existing meter ticket by ID.",
        "operationId": "update_meter_ticket",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The meter ticket ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Volumes_RequestMeterTicket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Meter ticket queued for update.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Meter ticket not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Meter ticket not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tickets/meter/{id}/cancel": {
      "patch": {
        "summary": "Cancel Meter Ticket",
        "description": "Cancel an existing meter ticket by ID.",
        "operationId": "cancel_meter_ticket",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The meter ticket ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Meter ticket queued for cancelation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Meter ticket not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Meter ticket not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/wells": {
      "get": {
        "summary": "List Wells",
        "description": "Retrieve a list of wells with pagination and filtering options.",
        "operationId": "get_wells",
        "tags": [
          "Wells"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "jurisdiction",
            "schema": {
              "type": "string",
              "enum": [
                "ALBERTA",
                "SASKATCHEWAN"
              ]
            },
            "required": false,
            "description": "Jurisdiction"
          },
          {
            "in": "query",
            "name": "license_issued",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false,
            "description": "License issue date"
          },
          {
            "in": "query",
            "name": "regulator_id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Regulator ID"
          },
          {
            "in": "query",
            "name": "section",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Section"
          },
          {
            "in": "query",
            "name": "event_sequence",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Event sequence number"
          },
          {
            "in": "query",
            "name": "location_exception",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Location exception"
          },
          {
            "in": "query",
            "name": "lsd",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Legal subdivision"
          },
          {
            "in": "query",
            "name": "meridian",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Meridian"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Well name"
          },
          {
            "in": "query",
            "name": "range",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Range"
          },
          {
            "in": "query",
            "name": "township",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Township"
          },
          {
            "in": "query",
            "name": "uwi",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Unique Well Identifier"
          },
          {
            "in": "query",
            "name": "license_status",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "License status"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of wells.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Wells_ReferenceWell"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/wells/{id}": {
      "get": {
        "summary": "Get Well",
        "description": "Retrieve details about a specific well including associated entity information.",
        "operationId": "get_well",
        "tags": [
          "Wells"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The well ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single well object containing well details along with related entity information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Wells_Well"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Well not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Well not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/entities": {
      "get": {
        "summary": "List Entities",
        "description": "Retrieve a list of entities with pagination and filtering options.",
        "operationId": "get_entities",
        "tags": [
          "Entities"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "legal_name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by legal name"
          },
          {
            "in": "query",
            "name": "business_line_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by business line ID"
          },
          {
            "in": "query",
            "name": "regulator_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by regulator ID"
          },
          {
            "in": "query",
            "name": "jurisdiction",
            "schema": {
              "type": "string",
              "enum": [
                "ALBERTA",
                "SASKATCHEWAN"
              ]
            },
            "description": "Filter by jurisdiction"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Entity_ReferenceEntity"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/entities/{id}": {
      "get": {
        "summary": "Get Entity",
        "description": "Retrieve details about a specific entity including associated producer, carrier, marketer and other entity types.",
        "operationId": "get_entity",
        "tags": [
          "Entities"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The entity ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single entity object containing entity details along with related entity type information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Entity_Entity"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Entity not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/entities/business-lines": {
      "get": {
        "summary": "List Business Lines",
        "description": "Retrieve a list of business lines with pagination and filtering options.",
        "operationId": "get_business_lines",
        "tags": [
          "Entities"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by business line name"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of business lines.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Entity_ReferenceBusinessLine"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/lookups/search": {
      "get": {
        "summary": "Search Lookups",
        "description": "Search across different lookup types by name",
        "operationId": "search_lookups",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string",
              "enum": [
                "Facility",
                "Well",
                "Entity",
                "CommercialFacility",
                "Organization"
              ]
            },
            "required": true,
            "description": "The type of lookup to search"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name to search for"
          }
        ],
        "responses": {
          "200": {
            "description": "Single matching lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Integrations_ReferenceFacilityLookup"
                        },
                        {
                          "$ref": "#/components/schemas/Integrations_ReferenceWellLookup"
                        },
                        {
                          "$ref": "#/components/schemas/Integrations_ReferenceEntityLookup"
                        },
                        {
                          "$ref": "#/components/schemas/Integrations_ReferenceCommercialFacilityLookup"
                        },
                        {
                          "$ref": "#/components/schemas/Integrations_ReferenceOrganizationLookup"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "No matching lookups found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No matching lookups found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/integrations/lookups/facilities": {
      "get": {
        "summary": "List Facility Lookups",
        "description": "Retrieve a list of facility lookups in the current organization with pagination and filtering options.",
        "operationId": "get_facility_lookups",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false,
            "description": "Filter by date (YYYY-MM-DD) - returns lookups active on this date"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of facility lookups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Integrations_ReferenceFacilityLookup"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create Facility Lookup",
        "description": "Create a new facility lookup",
        "operationId": "create_facility_lookup",
        "tags": [
          "Integrations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations_ReferenceFacilityLookup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Facility lookup created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_ReferenceFacilityLookup"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/lookups/facilities/{id}": {
      "get": {
        "summary": "Get Facility Lookup",
        "description": "Retrieve a single facility lookup by ID",
        "operationId": "get_facility_lookup",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The facility lookup ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single facility lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_FacilityLookup"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Facility lookup not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Facility lookup not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "summary": "Update Facility Lookup",
        "description": "Update an existing facility lookup by ID",
        "operationId": "update_facility_lookup",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The facility lookup ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations_FacilityLookup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated facility lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_FacilityLookup"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Facility lookup not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Facility lookup not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/lookups/wells": {
      "get": {
        "summary": "List Well Lookups",
        "description": "Retrieve a list of well lookups in the current orgainzation with pagination.",
        "operationId": "get_well_lookups",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of well lookups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Integrations_ReferenceWellLookup"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create Well Lookup",
        "description": "Create a new well lookup",
        "operationId": "create_well_lookup",
        "tags": [
          "Integrations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations_ReferenceWellLookup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Well lookup created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_ReferenceWellLookup"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/lookups/wells/{id}": {
      "get": {
        "summary": "Get Well Lookup",
        "description": "Retrieve a single well lookup by ID",
        "operationId": "get_well_lookup",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The well lookup ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single well lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_WellLookup"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Well lookup not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Well lookup not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "summary": "Update Well Lookup",
        "description": "Update an existing well lookup by ID",
        "operationId": "update_well_lookup",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The well lookup ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations_WellLookup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated well lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_WellLookup"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Well lookup not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Well lookup not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/lookups/commercial-facilities": {
      "get": {
        "summary": "List Commercial Facility Lookups",
        "description": "Retrieve a list of commercial facility lookups in the current organization with pagination.",
        "operationId": "get_commercial_facility_lookups",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of commercial facility lookups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Integrations_ReferenceCommercialFacilityLookup"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create Commercial Facility Lookup",
        "description": "Create a new commercial facility lookup",
        "operationId": "create_commercial_facility_lookup",
        "tags": [
          "Integrations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations_ReferenceCommercialFacilityLookup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Commercial facility lookup created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_ReferenceCommercialFacilityLookup"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/lookups/commercial-facilities/{id}": {
      "get": {
        "summary": "Get Commercial Facility Lookup",
        "description": "Retrieve a single commercial facility lookup by ID",
        "operationId": "get_commercial_facility_lookup",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The commercial facility lookup ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single commercial facility lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_CommercialFacilityLookup"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Commercial facility lookup not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Commercial facility lookup not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "summary": "Update Commercial Facility Lookup",
        "description": "Update an existing commercial facility lookup by ID",
        "operationId": "update_commercial_facility_lookup",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The commercial facility lookup ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations_CommercialFacilityLookup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated commercial facility lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_CommercialFacilityLookup"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Commercial facility lookup not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Commercial facility lookup not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/lookups/entities": {
      "get": {
        "summary": "List Entity Lookups",
        "description": "Retrieve a list of entity lookups in the current organization with pagination.",
        "operationId": "get_entity_lookups",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of entity lookups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Integrations_EntityLookup"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create Entity Lookup",
        "description": "Create a new entity lookup",
        "operationId": "create_entity_lookup",
        "tags": [
          "Integrations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations_EntityLookup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Entity lookup created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_EntityLookup"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/lookups/entities/{id}": {
      "get": {
        "summary": "Get Entity Lookup",
        "description": "Retrieve a single entity lookup by ID",
        "operationId": "get_entity_lookup",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The entity lookup ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single entity lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_EntityLookup"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity lookup not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Entity lookup not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "summary": "Update Entity Lookup",
        "description": "Update an existing entity lookup by ID",
        "operationId": "update_entity_lookup",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The entity lookup ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations_EntityLookup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated entity lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_EntityLookup"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity lookup not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Entity lookup not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/lookups/organizations": {
      "get": {
        "summary": "List Organization Lookups",
        "description": "Retrieve a list of organization lookups in the current organization with pagination.",
        "operationId": "get_organization_lookups",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of organization lookups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Integrations_OrganizationLookup"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create Organization Lookup",
        "description": "Create a new organization lookup",
        "operationId": "create_organization_lookup",
        "tags": [
          "Integrations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations_OrganizationLookup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization lookup created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_OrganizationLookup"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/integrations/lookups/organizations/{id}": {
      "get": {
        "summary": "Get Organization Lookup",
        "description": "Retrieve a single organization lookup by ID",
        "operationId": "get_organization_lookup",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The organization lookup ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single organization lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_OrganizationLookup"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization lookup not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Organization lookup not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "summary": "Update Organization Lookup",
        "description": "Update an existing organization lookup by ID",
        "operationId": "update_organization_lookup",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The organization lookup ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integrations_OrganizationLookup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated organization lookup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Integrations_OrganizationLookup"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization lookup not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Organization lookup not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/streams": {
      "get": {
        "summary": "List Streams",
        "description": "Retrieve a list of streams with pagination and filtering options.",
        "operationId": "get_streams",
        "tags": [
          "Streams"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "product_category_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by product category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of streams.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Streams_ReferenceStream"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/streams/{id}": {
      "get": {
        "summary": "Get Stream",
        "description": "Retrieve details of a specific stream, including its name, category, measurement units and unit conversions.",
        "operationId": "get_stream",
        "tags": [
          "Streams"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The stream ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single stream.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Streams_Stream"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Stream not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Stream not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/measurements/properties": {
      "get": {
        "summary": "List Measurement Properties",
        "description": "Retrieve a list of measurement properties with pagination.",
        "operationId": "get_measurement_properties",
        "tags": [
          "Measurements"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of measurement properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Measurements_ReferenceMeasurementProperty"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/measurements/types": {
      "get": {
        "summary": "List Measurement Types",
        "description": "Retrieve a list of measurement types with pagination.",
        "operationId": "get_measurement_types",
        "tags": [
          "Measurements"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of measurement types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Measurements_ReferenceMeasurementType"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/measurements/units": {
      "get": {
        "summary": "List Measurement Units",
        "description": "Retrieve a list of measurement units with pagination and filtering options.",
        "operationId": "get_measurement_units",
        "tags": [
          "Measurements"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by measurement unit name"
          },
          {
            "in": "query",
            "name": "abbreviation",
            "schema": {
              "type": "string"
            },
            "description": "Filter by measurement unit abbreviation"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "VOLUME",
                "TEMPERATURE",
                "DIMENSIONLESS",
                "DENSITY",
                "DISTANCE",
                "PRESSURE",
                "VISCOSITY",
                "MASS RATIO",
                "ENERGY",
                "FLOW RATE",
                "POWER",
                "PARTICLE SIZE"
              ]
            },
            "description": "Filter by measurement unit type"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of measurement units.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Measurements_ReferenceMeasurementUnit"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/measurements/units/{id}": {
      "get": {
        "summary": "Get Measurement Unit",
        "description": "Retrieve details of a specific measurement unit.",
        "operationId": "get_measurement_unit",
        "tags": [
          "Measurements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The measurement unit ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single measurement unit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Measurements_MeasurementUnit"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Measurement unit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Measurement unit not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/measurements/units/convert": {
      "post": {
        "summary": "Convert Between Measurement Units",
        "description": "Convert a value from one measurement unit to another using stored conversion factors.",
        "operationId": "convert_units",
        "tags": [
          "Measurements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "value",
                  "from_unit_id",
                  "to_unit_id",
                  "product_category_id"
                ],
                "properties": {
                  "value": {
                    "type": "number",
                    "description": "The value to convert"
                  },
                  "from_unit_id": {
                    "type": "integer",
                    "description": "Measurement Unit ID"
                  },
                  "to_unit_id": {
                    "type": "integer",
                    "description": "Measurement Unit ID"
                  },
                  "product_category_id": {
                    "type": "integer",
                    "description": "Product Category ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful conversion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "product_category": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        },
                        "from": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "number"
                            },
                            "measurement_unit": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "abbreviation": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "to": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "number"
                            },
                            "measurement_unit": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "abbreviation": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "formula": {
                          "type": "string",
                          "description": "The formula used for the conversion"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversion not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Conversion not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts": {
      "get": {
        "summary": "List Contracts",
        "description": "Retrieve a list of contracts with pagination and filtering options.",
        "operationId": "get_contracts",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "external_id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter by external ID"
          },
          {
            "in": "query",
            "name": "term",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by contract term ID"
          },
          {
            "in": "query",
            "name": "transaction_type",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Filter by contract transaction type ID"
          },
          {
            "in": "query",
            "name": "production_month",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter by production month in format YYYY-MM-DD"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "term",
                "transaction_type",
                "external_id",
                "start_date",
                "end_date",
                "created_at",
                "updated_at"
              ]
            },
            "required": false,
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sort_order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "required": false,
            "description": "Sort direction (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contracts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceContract"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create Contract",
        "description": "Create a new contract.",
        "operationId": "create_contract",
        "tags": [
          "Contracts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestContract"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contract successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_Contract"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}": {
      "get": {
        "summary": "Get Contract",
        "description": "Retrieve details about a specific contract.",
        "operationId": "get_contract",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single contract object containing contract details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_Contract"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contract not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Contract not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "summary": "Update Contract",
        "description": "Update an existing contract by ID.",
        "operationId": "update_contract",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestContract"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contract updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_Contract"
                }
              }
            }
          },
          "404": {
            "description": "Contract not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Contract not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Contract",
        "description": "Delete a contract.",
        "operationId": "delete_contract",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Contract successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contract successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Contract not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Contract not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/paper": {
      "post": {
        "summary": "Create Paper",
        "description": "Create a new paper.",
        "operationId": "create_paper",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestPaper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Paper successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_Paper"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/paper/{paper_id}": {
      "patch": {
        "summary": "Update Paper",
        "description": "Update an existing paper by ID.",
        "operationId": "update_paper",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "paper_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The paper ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestPaper"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Paper updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_Paper"
                }
              }
            }
          },
          "404": {
            "description": "Paper not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Paper not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/paper/{paper_id}/legal-provisions/{legal_provision_id}": {
      "patch": {
        "summary": "Attach Legal Provision",
        "description": "Attach a legal provision to a paper.",
        "operationId": "attach_legal_provision",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "paper_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The paper ID."
          },
          {
            "in": "path",
            "name": "legal_provision_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The legal provision ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestPaperLegalProvision"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Legal provision attached.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_PaperLegalProvision"
                }
              }
            }
          },
          "404": {
            "description": "Legal provision not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Legal provision not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Detach Legal Provision",
        "description": "Detach a legal provision from a paper.",
        "operationId": "detach_legal_provision",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "paper_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The paper ID."
          },
          {
            "in": "path",
            "name": "legal_provision_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The legal provision ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Legal provision successfully detached.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Legal provision successfully detached."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Legal provision not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Legal provision not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/profit-shares": {
      "post": {
        "summary": "Create Profit Share",
        "description": "Create a new profit share.",
        "operationId": "create_profit_share",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestProfitShare"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Profit share successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_ProfitShare"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/profit-shares/{profit_share_id}": {
      "patch": {
        "summary": "Update Profit Share",
        "description": "Update an existing profit share by ID.",
        "operationId": "update_profit_share",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "profit_share_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The profit share ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestProfitShare"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profit share updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_ProfitShare"
                }
              }
            }
          },
          "404": {
            "description": "Profit share not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Profit share not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Profit Share",
        "description": "Delete a profit share.",
        "operationId": "delete_profit_share",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "profit_share_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The profit share ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Profit share successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profit share successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Profit share not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Profit share not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/parties": {
      "post": {
        "summary": "Create Contract Party",
        "description": "Create a new contract party.",
        "operationId": "create_contract_party",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestContractParty"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contract party successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_ContractParty"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/parties/{contract_party_id}": {
      "patch": {
        "summary": "Update Contract Party",
        "description": "Update an existing contract party by ID.",
        "operationId": "update_contract_party",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "contract_party_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract party ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestContractParty"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contract party updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_ContractParty"
                }
              }
            }
          },
          "404": {
            "description": "Contract party not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Contract party not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Contract Party",
        "description": "Delete a contract party.",
        "operationId": "delete_contract_party",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "contract_party_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract party ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Contract party successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contract party successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Contract party not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Contract party not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/parties/{contract_party_id}/users": {
      "post": {
        "summary": "Create Contract Party User",
        "description": "Create a new contract party user.",
        "operationId": "create_contract_party_user",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "contract_party_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract party ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestContractPartyUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contract party user successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_ContractPartyUser"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/parties/{contract_party_id}/users/{user_id}": {
      "delete": {
        "summary": "Delete Contract Party User",
        "description": "Delete a contract party user.",
        "operationId": "delete_contract_party_user",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "contract_party_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract party ID."
          },
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The user ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Contract party user successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contract party user successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Contract party user not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Contract party user not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/schedules": {
      "get": {
        "summary": "List Contract Schedules",
        "description": "Retrieve a list of contract schedules with pagination and filtering options.",
        "operationId": "get_contract_schedules",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "production_month",
            "schema": {
              "type": "string",
              "format": "date",
              "default": null
            },
            "required": false,
            "description": "Production month in format YYYY-MM-DD"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Schedule Status"
          },
          {
            "in": "query",
            "name": "party_user_id",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Party User ID"
          },
          {
            "in": "query",
            "name": "contract_external_id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Contract External ID"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "production_month",
                "status",
                "created_at",
                "updated_at"
              ]
            },
            "required": false,
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sort_order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "required": false,
            "description": "Sort direction (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of schedules.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ContractSchedule"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/schedules": {
      "post": {
        "summary": "Create Contract Schedule",
        "description": "Create a new contract schedule.",
        "operationId": "create_contract_schedule",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestContractSchedule"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contract schedule successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_ContractSchedule"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/schedules/{schedule_id}": {
      "delete": {
        "summary": "Delete Contract Schedule",
        "description": "Delete a contract schedule.",
        "operationId": "delete_contract_schedule",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "schedule_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The schedule ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Contract schedule successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contract schedule successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Contract schedule not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Contract schedule not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items": {
      "post": {
        "summary": "Create Line Item",
        "description": "Create a new line item.",
        "operationId": "create_line_item",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestLineItem"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contract line item successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_LineItem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}": {
      "patch": {
        "summary": "Update Line Item",
        "description": "Update an existing line item by ID.",
        "operationId": "update_line_item",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestLineItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Line item updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_LineItem"
                }
              }
            }
          },
          "404": {
            "description": "Line item not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Line item not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Line Item",
        "description": "Delete a line item.",
        "operationId": "delete_line_item",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Line item successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Line item successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Line item not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Line item not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/fees": {
      "post": {
        "summary": "Create Fee",
        "description": "Create a new fee.",
        "operationId": "create_fee",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestFee"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Fee successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_Fee"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/fees/{fee_id}": {
      "patch": {
        "summary": "Update Fee",
        "description": "Update an existing fee by ID.",
        "operationId": "update_fee",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "fee_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The fee ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestFee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Fee updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_Fee"
                }
              }
            }
          },
          "404": {
            "description": "Fee not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Fee not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Fee",
        "description": "Delete a fee.",
        "operationId": "delete_fee",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "fee_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The fee ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Fee successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Fee successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Fee not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Fee not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/pricing-provisions": {
      "post": {
        "summary": "Create Pricing Provision",
        "description": "Create a new pricing provision.",
        "operationId": "create_pricing_provision",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestPricingProvision"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pricing provision successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_PricingProvision"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/pricing-provisions/{pricing_provision_id}": {
      "patch": {
        "summary": "Update Pricing Provision",
        "description": "Update an existing pricing provision by ID.",
        "operationId": "update_pricing_provision",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "pricing_provision_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The pricing provision ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestPricingProvision"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pricing provision updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_PricingProvision"
                }
              }
            }
          },
          "404": {
            "description": "Pricing provision not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Pricing provision not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Pricing Provision",
        "description": "Delete a pricing provision.",
        "operationId": "delete_pricing_provision",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "pricing_provision_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The pricing provision ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Pricing provision successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Pricing provision successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Pricing provision not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Pricing provision not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/pricing-provisions/{pricing_provision_id}/condition-groups": {
      "post": {
        "summary": "Create Condition Group",
        "description": "Create a new condition group.",
        "operationId": "create_condition_group",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "pricing_provision_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The pricing provision ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestConditionGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Condition group successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_ConditionGroup"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/pricing-provisions/{pricing_provision_id}/condition-groups/{condition_group_id}": {
      "patch": {
        "summary": "Update Condition Group",
        "description": "Update an existing condition group by ID.",
        "operationId": "update_condition_group",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "pricing_provision_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The pricing provision ID."
          },
          {
            "in": "path",
            "name": "condition_group_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The condition group ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestConditionGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Condition group updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_ConditionGroup"
                }
              }
            }
          },
          "404": {
            "description": "Condition group not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Condition group not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Condition Group",
        "description": "Delete a condition group.",
        "operationId": "delete_condition_group",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "pricing_provision_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The pricing provision ID."
          },
          {
            "in": "path",
            "name": "condition_group_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The condition group ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Condition group successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Condition group successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Condition group not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Condition group not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/pricing-provisions/{pricing_provision_id}/condition-groups/{condition_group_id}/pricing-conditions": {
      "post": {
        "summary": "Create Pricing Condition",
        "description": "Create a new pricing condition.",
        "operationId": "create_pricing_condition",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "pricing_provision_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The pricing provision ID."
          },
          {
            "in": "path",
            "name": "condition_group_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The condition group ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestPricingCondition"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pricing condition successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_PricingCondition"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/pricing-provisions/{pricing_provision_id}/condition-groups/{condition_group_id}/pricing-conditions/{pricing_condition_id}": {
      "patch": {
        "summary": "Update Pricing Condition",
        "description": "Update an existing pricing condition by ID.",
        "operationId": "update_pricing_condition",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "pricing_provision_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The pricing provision ID."
          },
          {
            "in": "path",
            "name": "condition_group_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The condition group ID."
          },
          {
            "in": "path",
            "name": "pricing_condition_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The pricing condition ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestPricingCondition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pricing condition updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_PricingCondition"
                }
              }
            }
          },
          "404": {
            "description": "Pricing condition not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Pricing condition not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Pricing Condition",
        "description": "Delete a pricing condition.",
        "operationId": "delete_pricing_condition",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "pricing_provision_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The pricing provision ID."
          },
          {
            "in": "path",
            "name": "condition_group_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The condition group ID."
          },
          {
            "in": "path",
            "name": "pricing_condition_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The pricing condition ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Pricing condition successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Pricing condition successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Pricing condition not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Pricing condition not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/transport-chains": {
      "post": {
        "summary": "Create Transport Chain",
        "description": "Create a new transport chain.",
        "operationId": "create_transport_chain",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestTransportChain"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transport chain successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_TransportChain"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/transport-chains/{transport_chain_id}": {
      "delete": {
        "summary": "Delete Transport Chain",
        "description": "Delete a transport chain.",
        "operationId": "delete_transport_chain",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "transport_chain_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The transport chain ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Transport chain successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Transport chain successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Transport chain not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Transport chain not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/transport-chains/{transport_chain_id}/transport-legs": {
      "post": {
        "summary": "Create Transport Leg",
        "description": "Create a new transport leg.",
        "operationId": "create_transport_leg",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "transport_chain_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The transport chain ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestTransportLeg"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transport leg successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_TransportLeg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/transport-chains/{transport_chain_id}/transport-legs/{transport_leg_id}": {
      "patch": {
        "summary": "Update Transport Leg",
        "description": "Update an existing transport leg by ID.",
        "operationId": "update_transport_leg",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "transport_chain_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The transport chain ID."
          },
          {
            "in": "path",
            "name": "transport_leg_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The transport leg ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestTransportLeg"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transport leg updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_TransportLeg"
                }
              }
            }
          },
          "404": {
            "description": "Transport leg not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Transport leg not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Transport Leg",
        "description": "Delete a transport leg.",
        "operationId": "delete_transport_leg",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "transport_chain_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The transport chain ID."
          },
          {
            "in": "path",
            "name": "transport_leg_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The transport leg ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Transport leg successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Transport leg successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Transport leg not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Transport leg not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/premiums": {
      "post": {
        "summary": "Create Premium",
        "description": "Create a new premium.",
        "operationId": "create_premium",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestPremium"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Premium successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contracts_Premium"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/{id}/line-items/{line_item_id}/premiums/{premium_id}": {
      "patch": {
        "summary": "Update Premium",
        "description": "Update an existing premium by ID.",
        "operationId": "update_premium",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "premium_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The premium ID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contracts_RequestPremium"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Premium updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contracts_Premium"
                }
              }
            }
          },
          "404": {
            "description": "Premium not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Premium not found."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Premium",
        "description": "Delete a premium.",
        "operationId": "delete_premium",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The contract ID."
          },
          {
            "in": "path",
            "name": "line_item_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The line item ID."
          },
          {
            "in": "path",
            "name": "premium_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The premium ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Premium successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Premium successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "description": "Premium not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Premium not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/statuses": {
      "get": {
        "summary": "List Contract Statuses",
        "description": "Retrieve a list of contract statuses with pagination.",
        "operationId": "get_contract_statuses",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceContractStatus"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/schedules/statuses": {
      "get": {
        "summary": "List Contract Schedules Statuses",
        "description": "Retrieve a list of contract schedules statuses with pagination.",
        "operationId": "get_contract_schedules_statuses",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceContractScheduleStatus"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/roles": {
      "get": {
        "summary": "List Contract Roles",
        "description": "Retrieve a list of contract roles with pagination.",
        "operationId": "get_contract_roles",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceContractRole"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/terms": {
      "get": {
        "summary": "List Contract Terms",
        "description": "Retrieve a list of contract terms with pagination.",
        "operationId": "get_contract_terms",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceContractTerm"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/payment-terms": {
      "get": {
        "summary": "List Contract Payment Terms",
        "description": "Retrieve a list of contract payment terms with pagination.",
        "operationId": "get_contract_payment_terms",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract payment terms.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceContractPaymentTerm"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/fees/types": {
      "get": {
        "summary": "List Contract Fee Types",
        "description": "Retrieve a list of contract fee types with pagination.",
        "operationId": "get_contract_fee_types",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract fee types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceFeeType"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/fees/categories": {
      "get": {
        "summary": "List Contract Fee Categories",
        "description": "Retrieve a list of contract fee categories with pagination.",
        "operationId": "get_contract_fee_categories",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract fee categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceFeeCategory"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/transaction-types": {
      "get": {
        "summary": "List Contract Transaction Types",
        "description": "Retrieve a list of contract transaction types with pagination.",
        "operationId": "get_contract_transaction_types",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceContractTransactionType"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/pricing-bases": {
      "get": {
        "summary": "List Contract Pricing Bases",
        "description": "Retrieve a list of contract pricing bases with pagination.",
        "operationId": "get_contract_pricing_bases",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of pricing bases.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pricing_ReferencePricingBasis"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/transport-modes": {
      "get": {
        "summary": "List Contract Transport Modes",
        "description": "Retrieve a list of contract transport modes with pagination.",
        "operationId": "get_contract_transport_modes",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract transport modes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceTransportMode"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/provisions/legal/types": {
      "get": {
        "summary": "List Contract Legal Provision Types",
        "description": "Retrieve a list of legal provision types within your organization with pagination.",
        "operationId": "get_contract_legal_provision_types",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of legal provision types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceLegalProvisionType"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/provisions/pricing/types": {
      "get": {
        "summary": "List Contract Pricing Provision Types",
        "description": "Retrieve a list of pricing provision types with pagination.",
        "operationId": "get_contract_pricing_provision_types",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of pricing provision types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferencePricingProvisionType"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/provisions/pricing/logical-operators": {
      "get": {
        "summary": "List Contract Logical Operators",
        "description": "Retrieve a list of contract logical operators with pagination.",
        "operationId": "get_contract_logical_operators",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract logical operators.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceLogicalOperator"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/provisions/pricing/comparison-operators": {
      "get": {
        "summary": "List Contract Comparison Operators",
        "description": "Retrieve a list of contract comparison operators with pagination.",
        "operationId": "get_contract_comparison_operators",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract comparison operators.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceComparisonOperator"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/gtcs": {
      "get": {
        "summary": "List Contract GTCs",
        "description": "Retrieve a list of contract GTCs with pagination.",
        "operationId": "get_contract_gtcs",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract GTCs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceGeneralTermsAndConditions"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/contracts/types": {
      "get": {
        "summary": "List Contract Types",
        "description": "Retrieve a list of contract types with pagination.",
        "operationId": "get_contract_types",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of contract types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contracts_ReferenceContractType"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/threads": {
      "get": {
        "summary": "List Threads",
        "description": "Retrieve a list of threads with pagination and filtering options.",
        "operationId": "get_threads",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of threads.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Messages_ReferenceMessageThread"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/threads/{id}": {
      "get": {
        "summary": "Get Thread",
        "description": "Retrieve details about a specific thread by ID.",
        "operationId": "get_thread",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The thread ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single thread object containing thread details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Messages_MessageThread"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Thread not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Thread not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/threads/types": {
      "get": {
        "summary": "List Thread Types",
        "description": "Retrieve a list of thread types.",
        "operationId": "get_thread_types",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of thread types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Messages_ReferenceThreadType"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/messages": {
      "get": {
        "summary": "List Messages",
        "description": "Retrieve a list of messages with pagination and filtering options.",
        "operationId": "get_messages",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false,
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of messages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Messages_ReferenceMessage"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/messages/{id}": {
      "get": {
        "summary": "Get Message",
        "description": "Retrieve details about a specific message by ID.",
        "operationId": "get_message",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The message ID."
          }
        ],
        "responses": {
          "200": {
            "description": "A single message object containing message details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Messages_Message"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Message not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Message not found."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "openapi": "3.0.2"
}